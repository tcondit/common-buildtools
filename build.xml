<?xml version="1.0" ?>
<!-- ===================================================================== -->
<!-- Envision build file                                                   -->
<!-- ===================================================================== -->
<project name="EPS" default="official-build" basedir="." xmlns:ac="antlib:net.sf.antcontrib">
<!-- <project name="EPS" default="help" basedir="."> -->
    <!-- TODO I'll need to do more work to use this as the default target.  It
    breaks my build runner. -->
    <target name="help" description="Tell user how to get help.">
        <echo message="Please specify at least one target"/>
        <echo message="To run a full build, use 'ant official-build'"/>
        <echo message="Type 'ant -projecthelp' for the full list of public targets"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make environment variables accessible in build.properties         -->
    <!-- ================================================================= -->
    <!-- http://forums.sun.com/thread.jspa?messageID=4257700 -->
    <property environment="env"/>

    <!-- ================================================================= -->
    <!-- Source the contents of build.properties                           -->
    <!-- ================================================================= -->
    <!-- Note: There should be no reference to this property anywhere in the
    rest of the script.  It is read at this point, the property values are
    set, and that's the end of it. -->
    <!-- TODO consider loadproperties task instead. -timc 5/28/2009 -->
    <property file="build.properties"/>

    <!-- ================================================================= -->
    <!-- taskdef ant-contrib                                               -->
    <!-- ================================================================= -->
    <!-- Be sure and spell the name of the jar file right (esp. watch the
    version). -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- ================================================================= -->
    <!-- test ant-contrib                                                  -->
    <!-- ================================================================= -->
    <!-- TEMP DEBUG target -->
    <target name="test-if">
        <if>
            <equals arg1="${update-on-rebuild}" arg2="true"/>
            <then>
                <echo message="The value of property update-on-rebuild is true"/>
            </then>
            <else>
                <echo message="The value of property update-on-rebuild is not true"/>
            </else>
        </if>
    </target>

    <!-- ================================================================= -->
    <!-- TODO does this replace the antcontrib taskdef ??                  -->
    <!-- ================================================================= -->
    <!-- TODO collect these things into a common location.  I'm probably going
    to have to consolidate the build scripts into a single file (or two). -->
    <!-- http://marc.info/?l=ant-user&m=117052469400299&w=2 -->
    <target name="define-ac">
        <typedef resource="net/sf/antcontrib/antlib.xml"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
        <!-- The logic conditions are not in antlib.xml ?? -->
        <typedef name="isgreaterthan"
            classname="net.sf.antcontrib.logic.condition.IsGreaterThan"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
        <typedef name="islessthan"
            classname="net.sf.antcontrib.logic.condition.IsLessThan"
            uri="antlib:net.sf.antcontrib"
            classpath="lib/ant-contrib-1.0b3.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Set conditional properties                                        -->
    <!-- ================================================================= -->
    <target name="propset" depends="define-ac">
        <!-- Use tasks from ant-contrib to figure out what kind of build we're
        doing.  It does decimal comparisons where appropriate, which is not
        everywhere.  In particular, 9.10 and higher need special treatment.
        Version numbers are not decimals, so we can't do decimal comparisons
        with them, e.g., 9.6 is greater than 9.10, 9.11, 9.5999, etc. -->

        <!-- This is a cascade, like switch statements without breaks.  It
        works because Ant's properties are immutable once set.  For instance,
        if the version is 9.9, the compiler is set to VS2008 when the 9.8.x if
        statement is encountered and found to be true.  The 9.6.x if statement
        is also encountered and is also true, but the property is already set,
        and is not reset. -->

        <!-- This target implicitly depends on not having big changes in
        service packs.  If that changes, I'll subdivide it further.  -->

        <!-- short-circuit sanity check -->
        <ac:if>
            <or>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:islessthan arg1="${MINOR}" arg2="6"/>
                </and>
                <and>
                    <ac:islessthan arg1="${MAJOR}" arg2="9"/>
                </and>
            </or>
            <then>
                <fail message="common-buildtools are only for product version 9.6 and later"/>
            </then>
        </ac:if>

        <!-- Part 1 of 2: set properties based on build version -->
        <!-- 10.1 (Viper) -->
        <ac:if>
            <or>
                <ac:isgreaterthan arg1="${MAJOR}.${MINOR}" arg2="10.1"/>
                <ac:equals arg1="${MAJOR}.${MINOR}" arg2="10.1"/>
            </or>
            <then>
                <echo message="INFO setting 10.1 properties (if any)"/>
                <property name="dir.sdk" value="${env.ETSDK}"/>
            </then>
        </ac:if>

        <!-- 10.0 -->
        <ac:if>
            <or>
                <ac:equals arg1="${MAJOR}.${MINOR}" arg2="10.0"/>
                <ac:islessthan arg1="${MAJOR}.${MINOR}" arg2="10.0"/>
            </or>
            <then>
                <echo message="INFO setting 10.0 properties (if any)"/>
                <property name="dir.sdk" value="${dir.build}/SDK"/>
            </then>
        </ac:if>

        <!-- 9.10 -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="10"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="10"/>
                </and>
            </or>
            <then>
                <echo message="INFO setting 9.10 properties (if any)"/>
            </then>
        </ac:if>

        <!-- 9.9 -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="9"/>
                </and>
            </or>
            <then>
                <echo message="INFO setting 9.9 properties (if any)"/>
            </then>
        </ac:if>

        <!-- 9.8 -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="8"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="8"/>
                </and>
            </or>
            <then>
                <echo message="INFO setting 9.8 properties (if any)"/>
                <property name="compiler.cpp" value="${vs90_devenv}"/>
                <property name="compiler.message" value="${vs90_mc}"/>
                <property name="vscommontools" value="${env.VS90COMNTOOLS}"/>
            </then>
        </ac:if>

        <!-- 9.7 -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <echo message="INFO setting 9.7 properties (if any)"/>
                <property name="file.pfx" value="${cert.envision}"/>
                <property name="signtool.password" value="${signtool.envisionpass}"/>
            </then>
        </ac:if>

        <!-- 9.6 -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="6"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="6"/>
                </and>
            </or>
            <then>
                <echo message="INFO setting 9.6 properties (if any)"/>
                <property name="compiler.cpp" value="${vs80_devenv}"/>
                <property name="compiler.message" value="${vs80_mc}"/>
                <property name="vscommontools" value="${env.VS80COMNTOOLS}"/>
                <property name="file.pfx" value="${cert.private}"/>
                <!-- <property name="signtool.password" value="${signtool.privatepass}"/> -->
                <property name="signtool.password" value="${signtool.envisionpass}"/>
                <!-- <property name="javac.source" value="1.6"/> -->
            </then>
        </ac:if>

        <!-- Part 2 of 2: Check for resources that we need in order to move
        on.  If property is not set, fail fast.  This still leaves open the
        possibility that we've assigned the wrong value to the property.
        Reference: http://ant.apache.org/manual/CoreTasks/conditions.html -->
        <ac:if>
            <not>
                <and>
                    <isset property="compiler.cpp"/>
                    <available file="${compiler.cpp}"/>
                </and>
            </not>
            <then>
                <fail message="property compiler.cpp is unset or unavailable"/>
            </then>
        </ac:if>

        <ac:if>
            <not>
                <and>
                    <isset property="compiler.message"/>
                    <available file="${compiler.message}"/>
                </and>
            </not>
            <then>
                <fail message="property compiler.message is unset or unavailable"/>
            </then>
        </ac:if>

        <ac:if>
            <not>
                <and>
                    <isset property="vscommontools"/>
                    <available file="${vscommontools}"/>
                </and>
            </not>
            <then>
                <fail message="property vscommontools is unset or unavailable"/>
            </then>
        </ac:if>

        <ac:if>
            <not>
                <and>
                    <isset property="file.pfx"/>
                    <!-- This is only available after we fetch the source.
                    That makes it either a good test, or a bad one.  I'm not
                    sure which. -->
                    <available file="${file.pfx}"/>
                </and>
            </not>
            <then>
                <fail message="property file.pfx is unset or unavailable"/>
            </then>
        </ac:if>

        <ac:if>
            <not>
                <and>
                    <isset property="signtool.password"/>
                    <!-- Cannot verify if this is available -->
                </and>
            </not>
            <then>
                <fail message="property signtool.password is unset or unavailable"/>
            </then>
        </ac:if>

        <!-- If we get here, display the current settings. -->
        <echo message="[ET]SDK: ${dir.sdk}"/>
        <echo message="C++ compiler: ${compiler.cpp}"/>
        <echo message="message compiler: ${compiler.message}"/>
        <echo message="VS common tools: ${vscommontools}"/>
        <echo message="certificate file: ${file.pfx}"/>
        <echo message="signtool password: ${signtool.password}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Create the svn task                                               -->
    <!-- ================================================================= -->
    <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
        <classpath>
            <fileset dir="${dir.lib}" includes="**/svn*.jar"/>
        </classpath>
    </taskdef>

    <!-- ================================================================= -->
    <!-- Common classpath                                                  -->
    <!-- ================================================================= -->
    <path id="project-classpath">
        <fileset dir="${dir.sdk}/Java">
            <include name="**/*.jar"/>
            <!-- keep this include until the Wise Server installer is gone,
            and these files are removed permanently -->
            <exclude name="Jakarta-Tomcat/**/*.jar"/>
        </fileset>
        <fileset dir="${dir.sdk}/cti_libs">
            <include name="**/*.jar"/>
        </fileset>
        <pathelement location="${dir.sdk}/Genesys/TLibrary7.1/genji.jar"/>
        <pathelement location="${dir.src}/Envision.jar"/>
        <pathelement location="${dir.src}/license.jar"/>
        <pathelement location="${dir.src}/tools/genstubskel"/>
    </path>

    <!-- ================================================================= -->
    <!-- pimpin'                                                           -->
    <!-- ================================================================= -->
    <target name="do-test">
        <ant antfile="buildC#CPP.xml" dir="." target="make-SharedResources"/>
    </target>

    <!-- ================================================================= -->
    <!-- Begin build tasks                                                 -->
    <!-- ================================================================= -->
    <target name="begin">
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.start" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build started: ${time.start}</echo>
        <!-- Stop virus protection to speed up the build -->
        <!-- The old Symantec virus checker is gone.  This can likewise go
        away (but that's not what I'm doing right now, so come back to it
        later).  -timc, Cinco de Mayo 2010 -->
        <exec dir="${dir.bin}" executable="cmd.exe" vmlauncher="false" failonerror="false">
            <arg line="/c stopsym.bat"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- End build tasks                                                   -->
    <!-- ================================================================= -->
    <target name="end">
        <!-- TODO Check if the semaphore file already exists.  This could
        indicate trouble.  (But isn't it too late by this point?) -->
        <!-- See the 'after' method of runbuild.py for details about this. -->
        <echo file="${dir.build}/../${version.product}_SUCCESS"/>
        <!-- restart virus protection -->
        <!-- The old Symantec virus checker is gone.  This can likewise go
        away (but that's not what I'm doing right now, so come back to it
        later).  -timc, Cinco de Mayo 2010 -->
        <exec dir="${dir.bin}" executable="cmd.exe" vmlauncher="false" failonerror="false">
            <arg line="/c startsym.bat"/>
        </exec>
        <!-- See Java's SimpleDateFormat for formatting details -->
        <tstamp>
            <format property="time.end" pattern="yyyy-MM-dd',' HH:mm:ss" locale="en_US"/>
        </tstamp>
        <echo>[${env.COMPUTERNAME}] Build completed: ${time.end}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Clean up the working directory, if any                            -->
    <!-- ================================================================= -->
    <target name="nuke-workdir"
        description="CAUTION: Deletes the current build working directory">
        <delete includeemptydirs="true" dir="${dir.build}" failonerror="true"/>
    </target>

    <!-- ================================================================= -->
    <!-- Fetch source from SVN repository (svn co)                         -->
    <!-- ================================================================= -->
    <!-- TODO add ability to specify revision? -->
    <target name="fetch-source" description="Get source from Subversion">
        <svn>
            <checkout url="${url.src}" destPath="${dir.build}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Update source from SVN repository (svn up)                        -->
    <!-- ================================================================= -->
    <target name="svn-up" description="Update source from Subversion">
        <svn>
            <update dir="${dir.build}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Get the SVN revision for the entire working copy                  -->
    <!-- ================================================================= -->
    <target name="get-head-revision"
        description="Get the HEAD revision for the working copy">
        <svn>
            <status path="${dir.build}" revisionProperty="repository.revision"/>
        </svn>
        <echo>repository.revision=${repository.revision}</echo>
    </target>

    <!-- ================================================================= -->
    <!-- Tag the latest build                                              -->
    <!-- ================================================================= -->
    <!-- Note 1: This target tags the source revision that was originally
    fetched from SVN, and does NOT include the latest version header and
    project file commits by default.  I've decided to be conservative and use
    the checkout revision for build notifications and for the tag.  This
    avoids the potential problem of other commits in the interim, although the
    version headers and the project files are not up to date - too bad I
    guess. -->
    <!-- Note 2: Be sure to use URLs for source and destination.  Tagging with
    a URL source and WC destination took 16 minutes, but tagging with URLs for
    source and destination took 3 seconds. -->
    <!-- Note 3: THIS TARGET FAILS if the parent directories are not already
    present.  svnant does not provide a way to get at the 'parents' option, so
    beware. -->
    <target name="tag-build" depends="get-head-revision"
        description="Tag nightly build with version header and project file commits">
        <tstamp>
            <format property="datestamp" pattern="yyMMdd" locale="en_US"/>
        </tstamp>
        <!-- It's past time for EVERY build to be tagged.  To do that I may
        need to mkdir some parent directories. -->
        <!-- http://subclipse.tigris.org/svnant/svn.html#mkdir -->
        <!-- TODO: use branch PRN number here instead of '00000'? -->
        <!--
        <svn username="buildmgr" password="buildmgr">
            <mkdir message="00000: Creating tags dir for build ${version.product}"
                url="${url.tags}"/>
        </svn>
        -->
        <property name="url.tag"
            value="${url.tags}/${datestamp}-${version.product}-r${repository.revision}"/>
        <echo message="tag-build: ${url.tag}"/>
        <svn username="buildmgr" password="buildmgr">
            <!-- repository.revision should be redundant here, but it doesn't
            hurt (AFAIK) -->
            <copy message="00000: Creating tag for build ${version.product}"
                srcUrl="${url.src}" destUrl="${url.tag}"
                revision="${repository.revision}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Move working copy directory to make way for upcoming build        -->
    <!-- ================================================================= -->
    <!-- I was keeping the working directory around for use and then nuking it at
    the start of the build/setup/release cycle.  The problem was that way too
    often, I'd leave a file or a command window open and the build would be
    unable to nuke the workdir, effectively killing the build - and blocking
    QA.
    .
    Now the whole working copy is moved right at the end of the
    build/setup/release cycle to ensure that there are no resources holding
    the directory hostage.
    .
    Side note: the move task fails with a useless error (example follows), so
    now I use cmd.
    .
    C:\Source\buildtools\branches\9.6\Initial\base\build.xml:241: Failed to copy
    C:\Source\9.6\Initial\base\path\to\file.xml to
    C:\Source\9.6\Initial\base-2008.08.15_13:58\path\to\file.xml due to
    C:\Source\9.6\Initial\base-2008.08.15_13:58\path\to\file.xml (The filename,
    directory name, or volume label syntax is incorrect)
    .
    -timc 8/18/2008
    -->
    <!-- TODO rewrite this and get rid of dir.build.present - set propset for
    ideas -timc 11/21/2009 -->
    <target name="move-workdir-postbuild" depends="get-head-revision"
        description="Move working directory after build completes">
        <property name="dir.postbuild"
            value="${dir.build}-${version.product}-r${repository.revision}"/>
        <available type="dir" file="${dir.build}" property="dir.build.present"/>
        <if>
            <equals arg1="${dir.build.present}" arg2="true"/>
            <then>
                <echo message="moving ${dir.build} to ${dir.postbuild}"/>
                <!-- TODO WHY am I copying the build dir this way???  I seem
                to recall it may have something to do with a race condition,
                where doing the move with an Ant task runs into trouble.  Or
                it may be that the Ant move task just doesn't work reliably on
                Windows.  -timc 12/10/2009 -->
                <exec dir="${basedir}" executable="cmd.exe" vmlauncher="false" failonerror="true">
                    <arg line="/c move ${dir.build} ${dir.postbuild}"/>
                </exec>
            </then>
            <else>
                <echo message="not moving ${dir.build} to ${dir.postbuild}"/>
            </else>
        </if>
    </target>

    <!-- TODO move this down (alphabetical?) -->
    <!-- ================================================================= -->
    <!-- Delete Stubs & Skels (rebuild only)                               -->
    <!-- ================================================================= -->
    <target name="del-stubskel">
        <!-- Adding verbose option on a trial basis.  -timc 4/17/09 -->
        <delete verbose="true">
            <fileset dir="${dir.build}" includes="**/*_Skel.* **/*_Stub.* **/*_Dist.*"/>
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- Create the release directory                                      -->
    <!-- ================================================================= -->
    <!-- TODO can we get rid of all of this?  -timc 1/2/2009 -->
    <!-- TODO at least *try* to build the effing thing without it -timc Cinco
    de Mayo 2010 -->
    <target name="create-release-dir" description="Creates Release directories">
        <!-- timc: This call to delete should no longer be needed, since we're
        using a clean working directory each time.  That's the idea, anyway.
        The reality is that we may sometimes run a build from an existing
        workdir.  So it's probably better to leave it in. -->
        <delete quiet="true" failonerror="false" includeEmptyDirs="true" dir="${dir.build}/Release"/>
        <mkdir dir="${dir.release}"/>
        <mkdir dir="${dir.release}/Admin"/>
        <mkdir dir="${dir.release}/Common"/>
    </target>

    <!-- =========================================================== -->
    <!-- Run the installer software and release the installers       -->
    <!-- =========================================================== -->
    <target name="setup-installers"
        description="Create and deploy the installers">
        <ant antfile="buildSetup.xml" dir="." target="release-installers"/>
    </target>

    <!-- ================================================================= -->
    <!-- e-mail build results                                              -->
    <!-- ================================================================= -->
    <!-- TODO This is supposed to be a temporary target, used only until we
    can go back to using MailLogger ... after there are fewer warnings -->

    <!-- The format of the echo message below looks a little odd, but it has
    to be formatted that way to get "normal" looking newlines.
    .
    In case it gets messed up, it's echo plus attributes, newline, then the
    message at column 0 on the following line, then close-echo directly
    following the end of the message. -->

    <!-- \\Bigfoot\Engineering\Projects -->
    <pathconvert targetos="windows" property="dir.projects.converted">
        <path path="${dir.projects}"/>
    </pathconvert>

    <!-- \\Bigfoot\Engineering\ProductBuilds -->
    <pathconvert targetos="windows" property="dir.products.converted">
        <path path="${dir.products}"/>
    </pathconvert>

    <target name="email-build-complete" depends="get-head-revision">
        <!-- TODO add tolist to runbuild.py -timc 11/21/2009 -->
        <mail from="buildmgr@envisioninc.com"
            tolist="${mail.to}"
            mailhost="corpserv04.acme.envisiontelephony.com"
            subject="build results, ${version.product} (r${repository.revision})"
            encoding="plain">
            <message>
Build is here: ${dir.products.converted}\${version.product}
Log file is here: ${dir.projects.converted}\logs\build_${version.product}.xml


Compiled from source revision ${repository.revision}


===========================================================
C# Unit Tests Results

${unittest.csharpresults}


Complete log here: ${dir.projects.converted}\unittests\${version.product}_verbose.xml
===========================================================
            </message>
        </mail>
    </target>

    <!-- ================================================================= -->
    <!-- Update all version files                                          -->
    <!-- ================================================================= -->
    <!-- TODO get rid of insert.exe - replace it with my insert.py or some
    other tool that does regular expression matching. -->
    <target name="change-version" description="Update all version files">
        <!-- TODO Consider getting rid of antcall in order to maintain the
        environment.  Make the top-level target (change-version in this case)
        depend on these other targets. -->
        <!-- Late note: a less radical approach might be use
        'depends="propset"' on all targets that include calls to antcall.
        That seems to work okay.  -timc Cinco de Mayo 2010 -->
        <antcall target="chver-CPP"/>
        <antcall target="chver-CSharp"/>
        <antcall target="chver-Java"/>
        <!-- AVPlayer.csproj (Centricity web application #1) -->
        <antcall target="chver-AVPlayer"/>
        <!-- RecordingDownloadTool.csproj (Centricity web application #2) -->
        <antcall target="chver-RecordingDownloadTool"/>
        <!-- EnvisionControls.inf -->
        <antcall target="chver-EnvisionControls_INF"/>
    </target>

    <!-- ================================================================= -->
    <!-- Commit all version and installer project files                    -->
    <!-- ================================================================= -->
    <!-- depends="change-version,setup-installers" -->
    <!-- TODO need a dependency here?  It's tricky, because at least
    setup-installers will rebuild all the installers, whether they're up to
    date or not. -->
    <target name="commit-all" description="Commit all version and installer project files">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version header and installer file commit for build ${version.product}">
                <fileset
                    dir="${dir.build}"
                    includes="
                    src/**/*.csproj
                    src/**/*.cs
                    src/**/*.h
                    src/**/*.java
                    setup/**/*.inf
                    setup/installs/**/*.aip"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit version files [batch version]                              -->
    <!-- ================================================================= -->
    <!-- TODO remove description to make this "private"? -->
    <target name="commit-version-files" depends="change-version"
        description="Commit all changed src files [intended to pick up only version files]">
        <svn username="buildmgr" password="buildmgr">
            <commit message="00000: Version file checkin for build ${version.product}">
                <!-- fileset needs to include the extensions of all version files -->
                <fileset
                    dir="${dir.build}"
                    includes="**/*.csproj,**/*.cs,**/*.h,**/*.java,**/*.inf"/>
            </commit>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit installer project files                                    -->
    <!-- ================================================================= -->
    <!-- TODO think about adding setup/Signature (or maybe just use setup)
    here to pick up the new EnvisionControls.cab and contents.  And then
    reconsider: why would I want to commit a cab?  Regardless,
    EnvisionControls.inf DOES need to be committed, but not here.  It goes in
    up above with the version file commits.  -->
    <target name="commit-installers" depends="setup-installers">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="${dir.installs}"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Commit project files without recompiling the installers           -->
    <!-- ================================================================= -->
    <target name="commit-installers-no-depends">
        <svn username="buildmgr" password="buildmgr">
            <commit dir="${dir.installs}"
                message="00000: Installer project file checkin for build ${version.product}"/>
        </svn>
    </target>

    <!-- ================================================================= -->
    <!-- Change C++ product versions                                       -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- #define _PRODUCT_VERSION 9,0,0300,4 -->
    <!-- #define _PRODUCT_VER_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_VER_LOGIN_STR "9.0.0300.4\0" -->
    <!-- #define _PRODUCT_ABOUT "Version 9.0.0300.4\0" -->
    <target name="chver-CPP">
        <property name="version_info_h" value="${dir.src}/include/version_info.h"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c40
                -s:x20_PRODUCT_VERSION:x20${p_MAJOR}:x2C${p_MINOR}:x2C${p_RELEASE}:x2C${p_BUILD}
                -r:x20_PRODUCT_VERSION:x20${MAJOR}:x2C${MINOR}:x2C${RELEASE}:x2C${BUILD}
                -o ${version_info_h}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c40
                -s:x20_PRODUCT_VER_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c40
                -s:x20_PRODUCT_VER_LOGIN_STR:x20:x22${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_VER_LOGIN_STR:x20:x22${version.product}
                -o ${version_info_h}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c40
                -s:x20_PRODUCT_ABOUT:x20:x22Version:x20${p_MAJOR}.${p_MINOR}.${p_RELEASE}.${p_BUILD}
                -r:x20_PRODUCT_ABOUT:x20:x22Version:x20${version.product}
                -o ${version_info_h}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change C# product versions                                        -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- public const string MAJOR = "9"; -->
    <!-- public const string MINOR = "0"; -->
    <!-- public const string RELEASE = "0300"; -->
    <!-- public const string BUILD = "4"; -->
    <target name="chver-CSharp">
        <property name="version_info_cs"
            value="${dir.src}/server/com/et/versioninfo/VersionInfo.cs"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20:x22${p_MAJOR}:x22;
                -r:x20MAJOR:x20=:x20:x22${MAJOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MINOR:x20=:x20:x22${p_MINOR}:x22;
                -r:x20MINOR:x20=:x20:x22${MINOR}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <!-- prn20765: this is incompatible with VersionInfo.cs, and probably
        broken.  I just opened the PRN, so we'll see what comes of it.  WFM
        and BI use this file. -->
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${version_info_cs}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20BUILD:x20=:x20:x22${p_BUILD}:x22;
                -r:x20BUILD:x20=:x20:x22${BUILD}:x22;
                -o ${version_info_cs}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <property name="daisy_version_cs_SERVER"
            value="${dir.src}/server/com/et/wfm/daisy/DaisyVersion.cs"/>
        <!-- clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs -->
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_SERVER}"/>
        </exec>

        <!-- prn18732 (in 9.0.4) hopefully temporary workaround -->
        <property name="daisy_version_cs_CLIENT"
            value="${dir.src}/clients/wfm/WFMClient/com/et/daisy/DaisyVersion.cs"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20${p_RELEASE};
                -r:x20RELEASE:x20=:x20${RELEASE};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${daisy_version_cs_CLIENT}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change Java product versions                                      -->
    <!-- ================================================================= -->
    <!-- TODO Consider adding description to make target public -->
    <!-- Note: prn18358 Only RELEASE was changed to a String -->
    <!-- public static final int MAJOR = 9; -->
    <!-- public static final int MINOR = 0; -->
    <!-- public static final String RELEASE = "0300"; -->
    <!-- public static final int BUILD = 4; -->
    <target name="chver-Java">
        <property name="ProductVersion_java" value="${dir.src}/server/com/et/startup/ProductVersion.java"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MAJOR:x20=:x20${p_MAJOR};
                -r:x20MAJOR:x20=:x20${MAJOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20MINOR:x20=:x20${p_MINOR};
                -r:x20MINOR:x20=:x20${MINOR};
                -o ${ProductVersion_java}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20RELEASE:x20=:x20:x22${p_RELEASE}:x22;
                -r:x20RELEASE:x20=:x20:x22${RELEASE}:x22;
                -o ${ProductVersion_java}"/>
        </exec>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c30
                -s:x20BUILD:x20=:x20${p_BUILD};
                -r:x20BUILD:x20=:x20${BUILD};
                -o ${ProductVersion_java}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change AVPlayer product version                                   -->
    <!-- ================================================================= -->
    <!-- example: all on one line
        "C:\Source\buildtools\branches\9.4\base\bin\Insert.exe" -x80
        -s":x3cApplicationVersion:x3e9.4.0000.0:x3c:x2fApplicationVersion:x3e"
        -r":x3cApplicationVersion:x3e9.4.0000.1:x3c:x2fApplicationVersion:x3e"
        -o AVPlayer.csproj -->
    <!-- this is Centricity web application #1 -->
    <target name="chver-AVPlayer">
        <property name="AVPlayer_csproj"
            value="${dir.src}/clients/AVPlayer/AVPlayer.csproj"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${AVPlayer_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change RecordingDownloadTool product version                      -->
    <!-- ================================================================= -->
    <!-- this is Centricity web application #2 -->
    <target name="chver-RecordingDownloadTool">
        <property name="RecordingDownloadTool_csproj"
            value="${dir.src}/clients/RecordingDownloadTool/RecordingDownloadTool.csproj"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c80
                -s:x3cApplicationVersion:x3e${version.previous}:x3c:x2fApplicationVersion:x3e
                -r:x3cApplicationVersion:x3e${version.product}:x3c:x2fApplicationVersion:x3e
                -o ${RecordingDownloadTool_csproj}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Change EnvisionControls.inf product version                       -->
    <!-- ================================================================= -->
    <target name="chver-EnvisionControls_INF">
        <!-- FileVersion=9,0,0,504 -->
        <property name="EnvisionControls_INF"
            value="${dir.build}/setup/Signature/EnvisionControls.inf"/>
        <exec dir="${dir.bin}" executable="insert.exe" vmlauncher="false">
            <arg line="-c80
                -sFileVersion:x3d${p_MAJOR},${p_MINOR},${p_RELEASE},${p_BUILD}
                -rFileVersion:x3d${MAJOR},${MINOR},${RELEASE},${BUILD}
                -o ${EnvisionControls_INF}"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Generate database schemas                                         -->
    <!-- ================================================================= -->
    <!-- TODO Do something about this. -timc 1/2/2009 -->
    <target name="generate-dbschemas"
        description="Generates Envision database schemas">

        <echo>workdir=${dir.workdir}</echo>
        <exec dir="${dir.workdir}" executable="cmd.exe" vmlauncher="false" failonerror="true">
            <arg line="/c GenDBSchemas.bat"/>
        </exec>

        <!-- TODO Fix this.  It's a rewrite of .\workdir\GenDBSchemas.bat -->
        <!--
        <path id="dbschema.classpath">
            <pathelement path="${dir.src}"/>
            <pathelement path="${dir.src}/tools"/>
            <pathelement location="${dir.build}/sdk/java/jdom.jar"/>
            <pathelement location="${dir.build}/sdk/java/commons-cli-1.0.jar"/>
        </path>

        <java classname="genDBSchema.GenDBSchemaFromFiles" dir="${dir.build}"
            fork="true" classpathref="dbschema.classpath">
            <arg value="-inputDir src\server\db\central"/>
            <arg value="-outputSchemaPath config\server\envision_schema_central.xml"/>
            <arg value="-schemaName CentralDB"/>
        </java>
        -->
    </target>

    <!-- ================================================================= -->
    <!-- Make JARs                                                         -->
    <!-- ================================================================= -->
    <!-- Ugliness: I added depends="propset" because calls to antcall seem to
    run in their own namespace.  (That's a VERY good thing.  The ugliness is
    the fact that we're using antcall in the first place.) -timc, Cinco de
    Mayo 2010 -->
    <target name="build-jars" depends="propset">
        <!-- TODO Consider getting rid of antcall in order to maintain the
        environment.  Make the top-level target (build-jars in this case)
        depend on these other targets. -->
        <!-- Late note: a less radical approach might be use
        'depends="propset"' on all targets that include calls to antcall.
        That seems to work okay. -timc Cinco de Mayo 2010 -->
        <!-- buildAll edit -->
        <!-- <antcall target="build-Envision_JAR"/> -->
        <!-- <ant antfile="buildJars.xml" dir="." target="build-Envision_JAR"/> -->

        <!-- copied from build-Envision_JAR to try and make ${dir.sdk}
        available -->
        <antcall target="clean_Envision"/>
        <antcall target="compile_Envision"/>
        <antcall target="jar_Envision"/>
        <antcall target="release_Envision"/>

        <!-- <antcall target="Envision"/> -->

        <antcall target="clean_license"/>
        <antcall target="compile_license"/>
        <antcall target="jar_license"/>
        <antcall target="release_license"/>
        <!-- TODO the product versions should be collected in a map somewhere -->
        <!-- Note: property EnvisionPluginAfter identifies the last version of
        the product that does *not* include the target jar-EnvisionPlugin.  I
        wrote it this way because antcontrib does not have an "is greater than
        or equal to" method, AFAIK. -->
        <!-- TODO add to propset -->
        <property name="EnvisionPluginAfter" value="9.7.0100"/>
        <ac:if>
            <or>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                    <ac:equals arg1="${RELEASE}" arg2="0100"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
            </or>
            <then>
                <antcall target="jar-EnvisionPlugin"/>
            </then>
            <else>
                <echo message="Skipping target jar-EnvisionPlugin (only version 9.8 or later)"/>
            </else>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# and C++ files                                             -->
    <!-- ================================================================= -->
    <!-- TODO Remove this dependency on buildC#CPP.xml.  Either use antcall
    and depends="propset" or just put the three targets in as dependencies on
    make-CPP -timc, Cinco de Mayo 2010 -->
    <target name="make-CPP" depends="build-CPP, build-CSharp, build-Loaders"/>
    <!--
    <target name="make-CPP">
        <ant antfile="buildC#CPP.xml" dir="." target="build-CPP"/>
    -->
        <!-- Acme (9.0) only
        <ant antfile="buildC#CPP.xml" dir="." target="build-CPP_debug"/> -->
    <!--
        <ant antfile="buildC#CPP.xml" dir="." target="build-CSharp"/>
        <ant antfile="buildC#CPP.xml" dir="." target="build-Loaders"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Touch source files                                                -->
    <!-- ================================================================= -->
    <target name="touch-build">
        <touch>
            <fileset dir="${dir.build}"/>
        </touch>
    </target>

    <!-- =================================================================== -->
    <!-- compile-genstubskel-jar                                             -->
    <!-- =================================================================== -->
    <target name="compile-genstubskel-jar" description="Compiles genstubskel">
        <javac srcdir="${dir.src}/tools/genstubskel"
            destdir="${dir.src}/tools/genstubskel"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            source="${javac.source}"
            optimize="on">
            <classpath refid="project-classpath" />
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- GenStubSkel Suite                                                 -->
    <!-- ================================================================= -->
    <target name="genstubskel-suite" description="genstubskel suite">
        <java classname="genstubskel.GenStubSkel" dir="${dir.build}"
            fork="true" args="GenStubSkel.xml">
            <classpath refid="project-classpath" />
        </java>
    </target>

    <!-- ================================================================= -->
    <!--  Make and sign Envision CAB files                                 -->
    <!-- ================================================================= -->
    <!-- TODO clean this up -->
    <!-- TODO defmacro? -timc 1/2/2009 -->
    <!-- TODO depends? -timc 4/17/2009 -->
    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (make-EnvisionControls_CAB in this
    case) depend on these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="make-EnvisionControls_CAB" depends="propset">
        <antcall target="make-EnvisionControls_CAB_EN"/>
        <!-- localized in 9.7.x or later -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
                <!--
                <ac:isgreaterthan arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.7.0000"/>
                <ac:equals arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.7.0000"/>
                -->
            </or>
            <then>
                <antcall target="make-EnvisionControls_CAB_DE"/>
                <antcall target="make-EnvisionControls_CAB_ES"/>
            </then>
        </ac:if>
    </target>

    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (sign-EnvisionControls_CAB in this
    case) depend on these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="sign-EnvisionControls_CAB" depends="propset">
        <antcall target="sign-EnvisionControls_CAB_EN"/>
        <!-- localized in 9.7.x or later -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <antcall target="sign-EnvisionControls_CAB_DE"/>
                <antcall target="sign-EnvisionControls_CAB_ES"/>
            </then>
        </ac:if>
    </target>

    <!-- English -->
    <target name="make-EnvisionControls_CAB_EN"
        description="Makes EnvisionControls.cab (English) using CabArc">
        <property name="dir.toCab_EN" value="${dir.build}/setup/Signature/EN/toCab"/>

        <!-- these files are common to all CABs -->
        <copy file="${dir.workdir}/WFM/AgentAdherence.ocx"
            tofile="${dir.toCab_EN}/AgentAdherence.ocx"/>
        <copy file="${dir.workdir}/WFM/AgentSchedule.ocx"
            tofile="${dir.toCab_EN}/AgentSchedule.ocx"/>
        <copy file="${dir.build}/setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_EN}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_EN}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_EN}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="${dir.workdir}/Quality/AgentX.ocx"
            tofile="${dir.toCab_EN}/AgentX.ocx"/>
        <copy file="${dir.src}/clients/reporting/C2CReportingControls/Release/C2CReportingControls.ocx"
            tofile="${dir.toCab_EN}/C2CReportingControls.ocx"/>
        <copy file="${dir.workdir}/agentdesktop/WebControls.ocx"
            tofile="${dir.toCab_EN}/WebControls.ocx"/>
        <!-- NB: ReleaseEnglish only works for ... -->
        <!-- Note the "logic": first we figure out if it's 9.6 or earlier.  Those
        are not localized, so they get English only.  Then we check if it's
        between 9.7.0 up to but not including 9.10.0.  Those use ReleaseEnglish
        for English; German and Spanish are not affected.  Finally, if it's
        9.10.0 or later, we switch back and use Release for English. -->
        <ac:if>
            <!-- 9.7.0 thru 9.9.x, localization with ReleaseEnglish -->
            <!-- TODO break this out into MAJOR and MINOR and make it work for
            10.0 like everywhere else. -timc 12/09/2009 -->
            <and>
                <or>
                    <ac:equals arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.7.0000"/>
                    <ac:isgreaterthan arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.7.0000"/>
                </or>
                <or>
                    <!-- Can't use 9.10.0000, seems to be a string compare issue -->
                    <ac:equals arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.9.9999"/>
                    <ac:islessthan arg1="${MAJOR}.${MINOR}.${RELEASE}" arg2="9.9.9999"/>
                </or>
            </and>
            <then>
                <copy file="${dir.src}/clients/quality/sharedresources/ReleaseEnglish/SharedResources.dll"
                    tofile="${dir.toCab_EN}/SharedResources.dll"/>
            </then>
            <else>
                <copy file="${dir.workdir}/quality/SharedResources.dll"
                    tofile="${dir.toCab_EN}/SharedResources.dll"/>
            </else>
        </ac:if>

        <!-- NB: CabArc.exe must be in the path or this will fail -->
        <cab cabfile="${dir.build}/setup/Signature/EN/EnvisionControls.cab"
            basedir="${dir.toCab_EN}"
            options="-s 6144"
            includes="AgentAdherence.ocx, AgentSchedule.ocx, AgentX.ocx,
            C2CReportingControls.ocx, WebControls.ocx, EnvisionControls.inf,
            _ISource.dll,mfc80.dll,SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- German -->
    <target name="make-EnvisionControls_CAB_DE"
        description="Makes EnvisionControls.cab (German) using CabArc">
        <property name="dir.toCab_DE" value="${dir.build}/setup/Signature/DE/toCab"/>

        <!-- these files are common to all CABs -->
        <copy file="${dir.workdir}/WFM/AgentAdherence.ocx"
            tofile="${dir.toCab_DE}/AgentAdherence.ocx"/>
        <copy file="${dir.workdir}/WFM/AgentSchedule.ocx"
            tofile="${dir.toCab_DE}/AgentSchedule.ocx"/>
        <copy file="${dir.build}/setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_DE}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_DE}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_DE}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="${dir.src}/clients/Quality/agentdesktop/ReleaseGerman/AgentX.ocx"
            tofile="${dir.toCab_DE}/AgentX.ocx"/>
        <copy file="${dir.src}/clients/reporting/C2CReportingControls/ReleaseGerman/C2CReportingControls.ocx"
            tofile="${dir.toCab_DE}/C2CReportingControls.ocx"/>
        <copy file="${dir.src}/clients/reporting/controls/ReleaseGerman/WebControls.ocx"
            tofile="${dir.toCab_DE}/WebControls.ocx"/>
        <copy file="${dir.src}/clients/quality/sharedresources/ReleaseGerman/SharedResources.dll"
            tofile="${dir.toCab_DE}/SharedResources.dll"/>

        <!-- NB: CabArc.exe must be in the path or this will fail -->
        <cab cabfile="${dir.build}/setup/Signature/DE/EnvisionControls.cab"
            basedir="${dir.toCab_DE}"
            options="-s 6144"
            includes="AgentAdherence.ocx, AgentSchedule.ocx, AgentX.ocx,
            C2CReportingControls.ocx, WebControls.ocx, EnvisionControls.inf,
            _ISource.dll,mfc80.dll,SharedResources.dll"
            verbose="yes"/>
    </target>

    <!-- Spanish -->
    <target name="make-EnvisionControls_CAB_ES"
        description="Makes EnvisionControls.cab (Spanish) using CabArc">
        <property name="dir.toCab_ES" value="${dir.build}/setup/Signature/ES/toCab"/>

        <!-- these files are common to all CABs -->
        <copy file="${dir.workdir}/WFM/AgentAdherence.ocx"
            tofile="${dir.toCab_ES}/AgentAdherence.ocx"/>
        <copy file="${dir.workdir}/WFM/AgentSchedule.ocx"
            tofile="${dir.toCab_ES}/AgentSchedule.ocx"/>
        <copy file="${dir.build}/setup/Signature/EnvisionControls.inf"
            tofile="${dir.toCab_ES}/EnvisionControls.inf"/>
        <copy file="${dir.sdk}/ISource/_ISource.dll"
            tofile="${dir.toCab_ES}/_ISource.dll"/>
        <copy file="${dir.sdk}/MS/mfc80.dll"
            tofile="${dir.toCab_ES}/mfc80.dll"/>

        <!-- specific to this CAB -->
        <copy file="${dir.src}/clients/Quality/agentdesktop/ReleaseSpanish/AgentX.ocx"
            tofile="${dir.toCab_ES}/AgentX.ocx"/>
        <copy file="${dir.src}/clients/reporting/C2CReportingControls/ReleaseSpanish/C2CReportingControls.ocx"
            tofile="${dir.toCab_ES}/C2CReportingControls.ocx"/>
        <copy file="${dir.src}/clients/reporting/controls/ReleaseSpanish/WebControls.ocx"
            tofile="${dir.toCab_ES}/WebControls.ocx"/>
        <copy file="${dir.src}/clients/quality/sharedresources/ReleaseSpanish/SharedResources.dll"
            tofile="${dir.toCab_ES}/SharedResources.dll"/>

        <!-- NB: CabArc.exe must be in the path or this will fail -->
        <cab cabfile="${dir.build}/setup/Signature/ES/EnvisionControls.cab"
            basedir="${dir.toCab_ES}"
            options="-s 6144"
            includes="AgentAdherence.ocx, AgentSchedule.ocx, AgentX.ocx,
            C2CReportingControls.ocx, WebControls.ocx, EnvisionControls.inf,
            _ISource.dll,mfc80.dll,SharedResources.dll"
            verbose="yes"/>
    </target>


    <!-- English -->
    <target name="sign-EnvisionControls_CAB_EN" depends="propset, make-EnvisionControls_CAB_EN"
        description="Signs EnvisionControls.cab (English) using signtool">
        <exec dir="${dir.build}" executable="${basedir}/${signtool}"
            vmlauncher="false" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                ${dir.build}/setup/Signature/EN/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- German -->
    <target name="sign-EnvisionControls_CAB_DE" depends="propset, make-EnvisionControls_CAB_DE"
        description="Signs EnvisionControls.cab (German) using signtool">
        <exec dir="${dir.build}" executable="${basedir}/${signtool}"
            vmlauncher="false" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                ${dir.build}/setup/Signature/DE/EnvisionControls.cab"/>
        </exec>
    </target>
    <!-- Spanish -->
    <target name="sign-EnvisionControls_CAB_ES" depends="propset, make-EnvisionControls_CAB_ES"
        description="Signs EnvisionControls.cab (Spanish) using signtool">
        <exec dir="${dir.build}" executable="${basedir}/${signtool}"
            vmlauncher="false" failonerror="true">
            <arg line="sign /a
                /f ${file.pfx}
                /p ${signtool.password}
                /t ${signtool.timestampurl}
                ${dir.build}/setup/Signature/ES/EnvisionControls.cab"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Target for running unit tests                                     -->
    <!-- ================================================================= -->
    <!-- build and run the unit tests -->
    <target name="run-unit-tests"
        description="Builds and runs unit tests">
        <!-- build and run C# unit tests -->
        <ant antfile="unitTests.xml" dir="." target="run-CSUnitTests"/>

        <!-- this is where JUnit tests can go -->
    </target>

    <!-- build, run, and publish the unit test results -->
    <target name="publish-unit-test-results" depends="propset"
        description="Publishes the results of the unit tests">
        <!-- publish the results for the c# unit tests -->
        <ant antfile="unitTests.xml" dir="." target="publish-CSUnitTests"/>

        <!-- this is where JUnit test results can be published -->

        <!-- load the results summary into a property -->
        <loadfile property="unittest.csharpresults"
            srcFile="${dir.projects.converted}\unittests\${version.product}_summary.txt"/>
    </target>


    <!-- ================================================================= -->
    <!-- official-build target                                             -->
    <!-- ================================================================= -->
    <!-- TODO maybe this should be a target with a long list of dependencies.
    The problem with that idea is that if something breaks, we've got to start
    over from the beginning, since it's indivisible.  Me no like.  But it
    might be good to aggregate it into bigger chunks.  I don't know what that
    would look like yet. -->
    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (official-build in this case)
    depend on these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="official-build">
        <!-- TODO set here at least temporarily -->
        <antcall target="propset"/>
        <antcall target="begin"/>
        <antcall target="nuke-workdir"/>
        <antcall target="fetch-source"/>
        <antcall target="change-version"/>
        <antcall target="create-release-dir"/>
        <antcall target="build-jars"/>
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <!-- TODO move this to buildC#CPP.xml -->
        <antcall target="sign-EnvisionControls_CAB"/>
        <antcall target="touch-build"/>
        <!-- TODO break this out into setup and publish targets -->
        <antcall target="setup-installers"/>
        <antcall target="commit-all"/>
        <antcall target="publish-unit-test-results"/>
        <antcall target="email-build-complete"/>
        <antcall target="tag-build"/>
        <antcall target="move-workdir-postbuild"/>
        <antcall target="end"/>
    </target>

    <!-- ================================================================= -->
    <!-- Rebuild Project                                                   -->
    <!-- ================================================================= -->
    <!-- Rebuild Project without getting source-->
    <!-- timc: Keep this one for Ed. -->
    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (rebuild in this case) depend on
    these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="rebuild" depends="propset">
        <!-- <antcall target="svn-up" if="update-on-rebuild"/> -->
        <!--
        <antcall target="svn-up">
            <condition>
                <istrue>property="update-on-rebuild"</istrue>
            </condition>
        </antcall>
        -->
        <!-- TODO set here at least temporarily -->
        <!-- <antcall target="propset"/> -->
        <antcall target="del-stubskel"/>
        <antcall target="create-release-dir"/>
        <antcall target="build-jars"/>
        <antcall target="compile-genstubskel-jar"/>
        <antcall target="genstubskel-suite"/>
        <antcall target="copy-jar-resources"/>
        <antcall target="build-jars"/>
        <antcall target="generate-dbschemas"/>
        <antcall target="make-CPP"/>
        <antcall target="sign-EnvisionControls_CAB"/>
    </target>


    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- <buildC#CPP.xml>                                                  -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->

    <!-- ================================================================= -->
    <!-- Build C++ project                                                 -->
    <!-- ================================================================= -->
    <!-- Note: WRT propset, build-CPP is all old skool, and not a problem.  It
    looks like we can call the targets natively here, and just set conditions
    as necessary in the individual targets. -->
    <!-- TODO Each target should depend on init.  init should check that the
    properties in propset are set, and only call that target if they are not.
    -->
    <!-- Dependencies:
    - make-AgentSupport (rather, reporting\controls\WebUtilsCtl.h) needs
    WebControls_h.h, which seems to come from make-WebControls_OCX
    -->
    <target name="build-CPP"
        depends="
        propset,
        make-RO,
        make-Serializable_LIB,
        make-Generated,
        make-RegUtils,
        make-SharedResources,
        make-Shared_LIB,
        make-UserTree_LIB,
        make-NotificationWindow_LIB,
        make-ContactSourceUtilities_LIB,
        make-NativeServiceWin32,
        make-AgentAutomation,
        make-EnvisionService,
        make-SourceRunner,
        make-JavaContactSource,
        make-ChannelManager,
        make-DialogicChannel60,
        make-CiscoICM,
        make-TSAPI,
        make-XFloorWnd,
        sign-AgentX_OCX,
        sign-AgentSchedule_OCX,
        sign-AgentAdherence_OCX,
        sign-C2CReportingControls_OCX,
        sign-WebControls_OCX,
        make-SmartAgentErrs,
        make-AgentSupport,
        make-Administrator,
        make-eLearning,
        make-QualityMonitoring,
        make-WFM
        "/>

    <!-- ================================================================= -->
    <!-- Build C#                                                          -->
    <!-- ================================================================= -->
    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (build-CSharp in this case) depend
    on these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="build-CSharp" depends="propset">
        <antcall target="make-Server_CS"/>
        <antcall target="make-APICommon_CS"/>
        <antcall target="make-Finder_CS"/>
        <!-- make-TaggerWrapperService_CS is in 9.6.x only -->
        <ac:if>
            <and>
                <or>
                    <ac:isgreaterthan arg1="${MAJOR}.${MINOR}" arg2="9.6"/>
                    <ac:equals arg1="${MAJOR}.${MINOR}" arg2="9.6"/>
                </or>
                <ac:islessthan arg1="${MAJOR}.${MINOR}" arg2="9.7"/>
            </and>
            <then>
                <antcall target="make-TaggerWrapperService_CS"/>
            </then>
        </ac:if>
        <antcall target="make-CallTagger_CS"/>
        <antcall target="make-FinderClient_CS"/>
        <antcall target="make-TaggingClient_CS"/>
        <antcall target="make-Portal_CS"/>
        <antcall target="make-ADIT"/>
        <antcall target="make-DBMigration"/>
        <antcall target="make-EvaluationConsistencyCheck"/>
        <antcall target="make-AutoTagger"/>
        <antcall target="make-AGMS"/>
        <antcall target="make-DADI"/>
        <antcall target="make-WMWrapperService"/>
        <antcall target="make-Centricity"/>
        <antcall target="publish-AVPlayer"/>
        <antcall target="publish-RecordingDownloadTool"/>
        <antcall target="sign-EnvisionCLR"/>
        <!-- 9.7.x (localization is handled in the targets) -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <antcall target="make-DeployAnalyticsTool"/>
                <antcall target="sign-AnalyticsResources"/>
                <antcall target="sign-AnalyticsUtilities"/>
            </then>
        </ac:if>
        <!-- 9.8.x -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="8"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="8"/>
                </and>
            </or>
            <then>
                <antcall target="make-Speech"/>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Build loaders project                                             -->
    <!-- ================================================================= -->
    <target name="build-Loaders" depends="propset, make-cstaLoader, make-ctcLoader6.0, make-ctcLoader7.0, make-hook"/>

    <!-- ================================================================= -->
    <!-- Make Windows Media Wrapper Service                                -->
    <!-- ================================================================= -->
    <!-- C:\Source\Maya\src\winservices\WMWrapperService\Redist\setup.bat -->
    <!-- NB: this target depends on WMEncoder.exe being installed on the build
    machine.  It's available locally at
    \\Bigfoot\Engineering\Software\Installs\WindowsMediaEncoder9 -->
    <target name="make-WMWrapperService" depends="register-NCT-binaries" description="Makes Windows Media wrapper service for Centricity">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/WMWrapperService/WMWrapperService.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Register NCT binaries (for use with WMWrapperService)             -->
    <!-- ================================================================= -->
    <target name="register-NCT-binaries">
        <!-- Don't fail on error.  The binaries may already be registered. -->
        <apply executable="regsvr32" relative="true" dir="${dir.src}/winservices/WMWrapperService/Redist">
            <!-- trailing space may be important here -->
            <arg line="/s "/>
            <fileset dir="${dir.src}/winservices/WMWrapperService/Redist" includes="**/NCT*.dll"/>
        </apply>
    </target>
    <!--
    regsvr32 exit codes:

    0 { &$Write "$DllPath Registered Successfully" }
    1 { &$Write "Bad arguments to RegSvr32" }
    2 { &$Write "OLE initialization failed for $DllPath" }
    3 { &$Write "Failed to load the module ($DllPath), you may need to check for problems with dependencies." }
    4 { &$Write "Can't find DllRegisterServer entry point in the file ($DllPath), maybe it's not a .DLL or .OCX?" }
    5 { &$Write "The assembly ($DllPath) was loaded, but the call to DllRegisterServer failed." }

    courtesy of
    http://huddledmasses.org/register-dll-calling-regsvr32-without-messageboxes-in-powershell/

    Watch out for result code 3.  This probably means that regsvr32 is not
    being run from the same directory as where the DLLs are located.
    -->

    <!-- ================================================================= -->
    <!-- Make Centricity web app                                           -->
    <!-- ================================================================= -->
    <!-- Dependencies:
    . \\Bigfoot\Engineering\Software\MICROSOFT\VS2005Pro-SP1
    . \\Bigfoot\Engineering\Software\MICROSOFT\VS2005 Addins\webdeploymentsetup.msi
    . ASPAJAXExtSetup.msi [ASP.NET 2.0 AJAX Extensions 1.0] -->
    <target name="make-Centricity" description="Makes Centricity web app">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Production ${dir.src}/clients/centricity/Centricity.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Speech Server Service and Speech Processing Client           -->
    <!-- ================================================================= -->
    <!-- The Speech apps depends on RAL.dll, Centricity_BLL.dll and
    Centricity_DAL.dll from Centricity, and Server.dll that I'm getting from
    the same location to simplify the dependencies.  The simplest thing that
    works here is to add make-Centricity as a dependency.  We need most of
    Centricity except for the deployment piece here, but I'd rather not cause
    Centricity to be redeployed just to build audio mining.  It'll stay for
    now. -timc 2/5/2009 -->
    <target name="make-Speech" depends="make-Centricity" description="Makes SpeechServerService and SpeechProcessingClient">
        <!-- dependency 1: AudioMiningRemotable -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/AudioMining.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make, sign, and publish Centricity AV Player (Click Once)         -->
    <!-- ================================================================= -->
    <!-- timc: Do we need this any longer? -->
    <target name="publish-AVPlayer" description="Publishes Centricity AVPlayer (Click Once) using MSBuild">
        <exec dir="${dir.build}" executable="${compiler.msbuild}" vmlauncher="false" failonerror="true">
            <arg line="/target:publish ${dir.src}/clients/AVPlayer/AVPlayer.csproj /property:Configuration=Release;PublishDir=${dir.workdir}/AVPlayer/ /l:FileLogger,Microsoft.Build.Engine;logfile=${dir.build}/BuildLog.txt;append=true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make, sign, and publish RecordingDownloadTool (Click Once)        -->
    <!-- ================================================================= -->
    <!-- timc: Do we need this any longer? -->
    <target name="publish-RecordingDownloadTool" description="Publishes Centricity RecordingDownloadTool (Click Once) using MSBuild">
        <exec dir="${dir.build}" executable="${compiler.msbuild}" vmlauncher="false" failonerror="true">
            <arg line="/target:publish ${dir.src}/clients/RecordingDownloadTool/RecordingDownloadTool.csproj /property:Configuration=Release;PublishDir=${dir.workdir}/RecordingDownloadTool/ /l:FileLogger,Microsoft.Build.Engine;logfile=${dir.build}/BuildLog.txt;append=true"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make and sign EnvisionCLR (includes DeployAnalyticsTool)          -->
    <!-- ================================================================= -->
    <target name="make-EnvisionCLR" description="Makes EnvisionCLR.dll for use with RDL files">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/centricity/Analytics/EnvisionCLR/EnvisionCLR.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <target name="sign-EnvisionCLR" depends="make-EnvisionCLR" description="Digitally signs EnvisionCLR.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/Centricity/Analytics/EnvisionCLR/obj/Release/EnvisionCLR.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make DeployAnalyticsTool                                          -->
    <!-- ================================================================= -->
    <target name="make-DeployAnalyticsTool" description="TODO">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/centricity/Analytics/DeployAnalyticsTool/DeployAnalyticsTool.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Sign AnalyticsResources                                           -->
    <!-- ================================================================= -->
    <!-- AnalyticsResources is compiled in make-DeployAnalyticsTool.
    Originally I had a make-AnalyticsResources target, which compiled
    AnalyticsResources.csproj, but it's redundant. -->
    <target name="sign-AnalyticsResources" depends="make-DeployAnalyticsTool" description="Digitally signs EnvisionAnalyticsResources.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/Centricity/Analytics/AnalyticsResources/obj/Release/EnvisionAnalyticsResources.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make and sign AnalyticsUtilities                                  -->
    <!-- ================================================================= -->
    <target name="make-AnalyticsUtilities" description="Makes EnvisionAnalyticsUtilities.dll for use with RDL files">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/centricity/Analytics/AnalyticsUtilities/AnalyticsUtilities.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <target name="sign-AnalyticsUtilities" depends="make-AnalyticsUtilities" description="Digitally signs EnvisionAnalyticsUtilities.dll to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <!-- /f ${dir.build}/setup/Signature/myprivatecert.pfx -->
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/Centricity/Analytics/AnalyticsUtilities/obj/Release/EnvisionAnalyticsUtilities.dll"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make AGMS                                                         -->
    <!-- ================================================================= -->
    <target name="make-AGMS" description="Makes AGMS using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/tools/AGMS/AGMS.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make ADIT                                                         -->
    <!-- ================================================================= -->
    <target name="make-ADIT" description="Makes ADIT using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/tools/ADIT/Gold/ADIT.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make DADI                                                         -->
    <!-- ================================================================= -->
    <!-- It's not in buildtools/branches/9.0/SP4/base/buildC#CPP.xml -->
    <target name="make-DADI" description="Makes DADI using devenv.com">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/tools/DADI/DADI.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make TSAPI                                                        -->
    <!-- ================================================================= -->
    <target name="make-TSAPI" description="Makes tsapi using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/tsapi/Tsapi.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- make-DBMigration                                                  -->
    <!-- ================================================================= -->
    <target name="make-DBMigration" description="Makes DBMigrationWizard.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/tools/DBMigration/DBMIGRATIONWIZARD/DBMigrationWizard.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Evaluation Consistency Check                                 -->
    <!-- ================================================================= -->
    <target name="make-EvaluationConsistencyCheck" description="Make EvaluationConsistencyCheck.exe (a database migration utility)">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/tools/EvaluationConsistencyCheck/EvaluationConsistencyCheck.sln /out ${dir.build}/BuildLog.txt" />
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make CSTA Loader                                                   -->
    <!-- ================================================================= -->
    <!-- TODO are we using these? -timc 5/27/2009 -->
    <target name="make-cstaLoader" description="Makes cstaLoader using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release_1_2 ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release_1_3_3 ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release_3_33 ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release_9_1 ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release_9_5 ${dir.src}/contactsources/tsapi/cstaLoader/cstaLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Portal                                                    -->
    <!-- ================================================================= -->
    <target name="make-Portal_CS" description="Makes BI Portal using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/portal/portal.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Tagging Client                                            -->
    <!-- ================================================================= -->
    <target name="make-TaggingClient_CS" description="Makes BI Tagging Client using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/taggingclient/TaggingClient.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Finder Client                                             -->
    <!-- ================================================================= -->
    <target name="make-FinderClient_CS" description="Makes BI Finder Client using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/finder/finderclient.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make BI Call Tagger                                               -->
    <!-- ================================================================= -->
    <target name="make-CallTagger_CS" description="Makes BI Call Tagger using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/apis/bi/com/et/bi/api/tagger/ETCallTagger.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# Server                                                    -->
    <!-- ================================================================= -->
    <!-- NB: The project is corearch in Acme, and server in Maya -->
    <target name="make-Server_CS" description="Makes Server.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/server/server.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# APICommon.dll                                             -->
    <!-- ================================================================= -->
    <target name="make-APICommon_CS" description="Makes APICommon.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/apis/bi/com/et/bi/api/common/APICommon.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# finder.dll                                                -->
    <!-- ================================================================= -->
    <target name="make-Finder_CS" description="Makes finder.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/apis/bi/com/et/bi/api/finder/finder.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make C# TaggerWrapperService.dll                                  -->
    <!-- ================================================================= -->
    <target name="make-TaggerWrapperService_CS" description="Makes TaggerWrapperService.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/apis/bi/com/et/bi/api/tagger/wrapperservice/TaggerWrapperService.csproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make ctcLoader7.0                                                -->
    <!-- ================================================================= -->
    <target name="make-ctcLoader7.0" description="Makes ctcLoader7.0 using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/netmerge/ctcLoader_7_0/ctcLoader.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make ctcLoader6.0                                                -->
    <!-- ================================================================= -->
    <target name="make-ctcLoader6.0" description="Makes ctcLoader6.0 using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/netmerge/ctcLoader_6_0/ctcLoader_6_0.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make hook                                                        -->
    <!-- ================================================================= -->
    <!-- Per Ed in email, 1/21/09 "This is the hook.dll component for getting
    Windows messages into AgentSupport to process start/stop email captures.
    This is used for email integrations.  This is a class of components that
    just needs to be built once when we change toolset (compiler version)."
    -->
    <target name="make-hook" description="Makes hook.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/agentsupport/monitoring/KanaDriver/dll/hook.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make CiscoICM                                                    -->
    <!-- ================================================================= -->
    <target name="make-CiscoICM" description="Makes CiscoICM.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/ciscoicm/CiscoICM.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make RegUtils                                                     -->
    <!-- ================================================================= -->
    <target name="make-RegUtils" description="Makes RegUtils.lib using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/regutils/regutils.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <!-- TODO are we using this? -timc 5/27/2009 -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Debug ${dir.src}/clients/quality/regutils/regutils.vcproj"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make SmartAgentErrs                                              -->
    <!-- ================================================================= -->
    <target name="make-SmartAgentErrs" description="Makes SmartAgentErrs.dll using devenv.exe">
        <exec dir="${dir.src}/clients/quality/agentsupport/smartagenterrs" executable="${compiler.message}" vmlauncher="false" failonerror="true">
            <arg line="-v -c -s -h ..\ -r .\ -x .\ -U smartagenterrs.mc" />
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/agentsupport/smartagenterrs/SmartAgentErrs.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make AgentSupport                                                -->
    <!-- ================================================================= -->
    <!-- TODO organize this such that the languages are separable.  In other
    words, do it the same way EnvisionControls_CAB is done in build.xml. -->
    <!-- TODO macrodefs?  Maybe this should come after the previous TODO about
    separating by languages.  See buildSetup.xml for an example. -->
    <target name="make-AgentSupport" depends="propset" description="Makes AgentSupport using devenv.exe">
        <!-- English only -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/AgentSupport.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/AgentSupport.sln /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/AgentSupport.sln /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!--  Make Quality Monitoring                                          -->
    <!-- ================================================================= -->
    <!-- NOTE This looks like a PerformanceSuite target only.  So when I
    reorganize the buildtools toward the goal of creating each product
    separately, this one will standalone.  IOW, it will not be a prerequisite
    compile for anything else (as far as I know). -->
    <target name="make-QualityMonitoring" depends="propset" description="Makes QM using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!--  Make eLearning                                                   -->
    <!-- ================================================================= -->
    <target name="make-eLearning" depends="propset" description="Makes eLearning using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build eLearningRelease ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build eLearningReleaseGerman ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build eLearningReleaseSpanish ${dir.src}/clients/quality/qm/qm.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!--  Make RO                                                          -->
    <!-- ================================================================= -->
    <target name="make-RO" description="Makes RO using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/server/ro/cpp/ro.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <!-- TODO are we using this? -timc 5/27/2009 -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Debug ${dir.src}/server/ro/cpp/ro.vcproj"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make NativeServiceWin32                                           -->
    <!-- ================================================================= -->
    <target name="make-NativeServiceWin32" description="Makes NativeServiceWin32.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/server/nativeservicewin32/nativeServiceWin32.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Administrator.exe                                            -->
    <!-- ================================================================= -->
    <target name="make-Administrator" description="Makes Administrator.exe using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/admin/Administrator/Administrator.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make XFloorWnd.ocx                                                -->
    <!-- ================================================================= -->
    <target name="make-XFloorWnd" description="Makes XFloorWnd.ocx using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/xfloorwnd/XFloorWnd.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make Agent Automation                                            -->
    <!-- ================================================================= -->
    <target name="make-AgentAutomation" depends="propset" description="Makes AgentAutomation.dll using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
            <arg line="/build Release ${dir.src}/apis/AgentAutomation.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make SharedResources DLL                                         -->
    <!-- ================================================================= -->
    <!-- Note the "logic": first we figure out if it's 9.6 or earlier.  Those
    are not localized, so they get English only.  Then we check if it's
    between 9.7.0 up to but not including 9.10.0.  Those use ReleaseEnglish
    for English; German and Spanish are not affected.  Finally, if it's 9.10.0
    or later, we switch back and use Release for English. -->
    <target name="make-SharedResources" depends="propset" description="Makes SharedResources.dll using devenv.exe">
        <ac:if>
            <!-- up to 9.6.x, no localization -->
            <or>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="6"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:islessthan arg1="${MINOR}" arg2="6"/>
                </and>
                <and>
                    <ac:islessthan arg1="${MAJOR}" arg2="9"/>
                </and>
            </or>
            <then>
                <echo message="in the 9.6 SharedResources block"/>
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build Release ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
            <ac:elseif>
                <!-- 9.7.0 thru 9.9.x, localization with ReleaseEnglish -->
                <and>
                    <or>
                        <and>
                            <ac:equals arg1="${MAJOR}" arg2="9"/>
                            <ac:equals arg1="${MINOR}" arg2="7"/>
                        </and>
                        <and>
                            <ac:equals arg1="${MAJOR}" arg2="9"/>
                            <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                        </and>
                    </or>
                    <and>
                        <ac:equals arg1="${MAJOR}" arg2="9"/>
                        <ac:islessthan arg1="${MINOR}" arg2="10"/>
                    </and>
                </and>
                <then>
                    <echo message="in the at-least 9.7 but less than 9.10 SharedResources block"/>
                    <echo message="ReleaseEnglish, ReleaseGerman, ReleaseSpanish"/>
                    <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                        <arg line="/build ReleaseEnglish ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                    </exec>
                    <!-- German -->
                    <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                        <arg line="/build ReleaseGerman ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                    </exec>
                    <!-- Spanish -->
                    <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                        <arg line="/build ReleaseSpanish ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                    </exec>
                </then>
            </ac:elseif>
            <ac:else>
                <!-- DRY (combine with 9.6 check?) -->
                <!-- 9.10.x or later, localization with Release for English -->
                <echo message="Release, ReleaseGerman, ReleaseSpanish"/>
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build Release ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/quality/sharedresources/SharedResources.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </ac:else>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!--  Make and sign AgentX.ocx                                         -->
    <!-- ================================================================= -->
    <target name="make-AgentX_OCX" depends="propset" description="Makes AgentX.ocx using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
            <arg line="/build Release ${dir.src}/clients/quality/agentdesktop/AgentX.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/quality/agentdesktop/AgentX.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/quality/agentdesktop/AgentX.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <target name="sign-AgentX_OCX" depends="propset, make-AgentX_OCX" description="Digitally signs AgentX.ocx to verify its authenticity.">
        <!-- English -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.workdir}/quality/AgentX.ocx"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- NB: don't forget the ${basedir}! -->
                <!-- German -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/quality/agentdesktop/ReleaseGerman/AgentX.ocx"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/quality/agentdesktop/ReleaseSpanish/AgentX.ocx"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!--  Make and sign AgentAdherence.ocx                                 -->
    <!-- ================================================================= -->
    <target name="make-AgentAdherence_OCX" description="Makes AgentAdherence.ocx using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/wfm/agentadherence/AgentAdherence.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <target name="sign-AgentAdherence_OCX" depends="make-AgentAdherence_OCX" description="Digitally signs AgentAdherence.ocx to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.workdir}/wfm/AgentAdherence.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make and sign AgentSchedule.ocx                                  -->
    <!-- ================================================================= -->
    <target name="make-AgentSchedule_OCX" description="Makes AgentSchedule.ocx using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/wfm/agentschedule/AgentSchedule.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <target name="sign-AgentSchedule_OCX" depends="make-AgentSchedule_OCX" description="Digitally signs AgentSchedule.ocx to verify its authenticity.">
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.workdir}/wfm/AgentSchedule.ocx"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make and sign C2CReportingControls.ocx                           -->
    <!-- ================================================================= -->
    <target name="make-C2CReportingControls_OCX" depends="propset" description="Makes C2CReportingControls.ocx using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
            <arg line="/build Release ${dir.src}/clients/reporting/C2CReportingControls/C2CReportingControls.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/reporting/C2CReportingControls/C2CReportingControls.sln /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="false">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/reporting/C2CReportingControls/C2CReportingControls.sln /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <target name="sign-C2CReportingControls_OCX" depends="propset, make-C2CReportingControls_OCX" description="Digitally signs C2CReportingControls.ocx to verify its authenticity.">
        <!-- English -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/reporting/C2CReportingControls/Release/C2CReportingControls.ocx"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <!-- NB: don't forget the ${basedir}! -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/reporting/C2CReportingControls/ReleaseGerman/C2CReportingControls.ocx"/>
                </exec>
                <!-- Spanish -->
                <!-- NB: don't forget the ${basedir}! -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/reporting/C2CReportingControls/ReleaseSpanish/C2CReportingControls.ocx"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Make and sign WebControls.ocx                                     -->
    <!-- ================================================================= -->
    <target name="make-WebControls_OCX" depends="propset" description="Makes WebControls.ocx using devenv.exe">
        <!-- English -->
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/reporting/controls/WebControls.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseGerman ${dir.src}/clients/reporting/controls/WebControls.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
                <!-- Spanish -->
                <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
                    <arg line="/build ReleaseSpanish ${dir.src}/clients/reporting/controls/WebControls.vcproj /out ${dir.build}/BuildLog.txt"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <target name="sign-WebControls_OCX" depends="propset, make-WebControls_OCX" description="Digitally signs WebControls.ocx to verify its authenticity.">
        <!-- English -->
        <!-- NB: don't forget the ${basedir}! -->
        <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
            <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.workdir}/agentdesktop/WebControls.ocx"/>
        </exec>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="7"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="7"/>
                </and>
            </or>
            <then>
                <!-- German -->
                <!-- NB: don't forget the ${basedir}! -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/reporting/controls/ReleaseGerman/WebControls.ocx"/>
                </exec>
                <!-- Spanish -->
                <!-- NB: don't forget the ${basedir}! -->
                <exec dir="${dir.build}" executable="${basedir}/${signtool}" vmlauncher="false" failonerror="true">
                    <arg line="sign /a /f ${file.pfx} /p ${signtool.password} /t ${signtool.timestampurl} ${dir.src}/clients/reporting/controls/ReleaseSpanish/WebControls.ocx"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Make Shared.Lib                                                   -->
    <!-- ================================================================= -->
    <target name="make-Shared_LIB" description="Makes Shared Lib using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/shared/Shared.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make SourceRunnerService.exe                                      -->
    <!-- ================================================================= -->
    <target name="make-SourceRunner" depends="make-ContactSourceUtilities_LIB" description="Makes SourceRunnerService.exe using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/SourceRunnerService.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make JavaContactSource.dll                                        -->
    <!-- ================================================================= -->
    <target name="make-JavaContactSource" description="Makes javacontactsource.dll using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/javacontactsource/JavaContactSource.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make NotificationWindow.lib                                       -->
    <!-- ================================================================= -->
    <target name="make-NotificationWindow_LIB" description="Makes notificationwindow.lib using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/notificationwindow/NotificationWindow.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make NetMerge.dll                                                 -->
    <!-- ================================================================= -->
    <!-- Caution!
    .
    This one is not used BUT debug is!! Should this one be in build-cpp?   -->
    <!--
    <target name="make-NetMerge" description="Makes NetMerge.dll using devenv.exe">
        <echo file="${dir.build}\ProjectThatErrored.txt" message="NetMerge.dll"/>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/netmerge/NetMerge.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->
    <!--
    <target name="make-NetMerge_debug" description="Makes NetMerge.dll using devenv.exe">
        <echo file="${dir.build}\ProjectThatErrored.txt" message="NetMerge.dll"/>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Debug ${dir.src}/contactsources/netmerge/NetMerge.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make NetMergeLoader.dll                                           -->
    <!-- ================================================================= -->
    <!-- Caution!
    .
    This one is not used BUT debug is!! Should this one be in build-cpp?   -->
    <!--
    <target name="make-NetMergeLoader" description="Makes NetMergeLoader.dll using devenv.exe">
        <echo file="${dir.build}\ProjectThatErrored.txt" message="NetMergeLoader.dll"/>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/netmerge/ctcLoader_6_0/ctcLoader_6_0.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->
    <!--
    <target name="make-NetMergeLoader_debug" description="Makes NetMergeLoader.dll using devenv.exe">
        <echo file="${dir.build}\ProjectThatErrored.txt" message="NetMergeLoader.dll"/>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Debug ${dir.src}/contactsources/netmerge/ctcLoader_6_0/ctcLoader_6_0.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make ContactSourceUtilities.lib                                   -->
    <!-- ================================================================= -->
    <target name="make-ContactSourceUtilities_LIB" description="Makes ContactSourceUtils.lib using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/contactsources/contactsourceutilities/ContactSourceUtils.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Automated Tagger DLLs                                        -->
    <!-- ================================================================= -->
    <!-- VB, but compiled with build-CSharp (go figure) -->
    <target name="make-AutoTagger" description="Makes Automated Tagger DLLs devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/focus/PSPost.root/AutomatedTagger.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Serializable                                                 -->
    <!-- ================================================================= -->
    <target name="make-Serializable_LIB" description="Makes Serializable.lib using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/serializable/serializable.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make Generated                                                    -->
    <!-- ================================================================= -->
    <target name="make-Generated" description="Makes generated devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/generated/generated.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make UserTree                                                     -->
    <!-- ================================================================= -->
    <target name="make-UserTree_LIB" description="Makes usertree.lib devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/quality/usertree/usertree.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make WFM                                                          -->
    <!-- ================================================================= -->
    <target name="make-WFM" description="Makes WFM using devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/clients/wfm/wfm.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!--  Make Channel Manager                                             -->
    <!-- ================================================================= -->
    <!-- TODO break into projects! -timc 5/4/2009 -->
    <target name="make-ChannelManager" description="Makes channelmanager devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/ChannelManager.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    <!--
    <target name="make-ChannelManager_debug_named" description="Makes channelmanager devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build DebugNamed ${dir.src}/winservices/ChannelManager.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->

    <!-- timc: CAUTION this one creates a file of the same name
    (ChanMgrSvc.exe) as make-ChannelManager.  DO NOT SHIP THIS!!  For the
    installer, we need to run make-ChannelManager and
    make-ChannelManager_debug_named, which will need to be created. -->
    <!--
    <target name="make-ChannelManager_debug" description="Makes channelmanager devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Debug ${dir.src}/winservices/ChannelManager.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make DialogicChannel60                                            -->
    <!-- ================================================================= -->
    <!-- TODO why is this a separate vcproj? -timc 5/4/2009 -->
    <!-- TODO can I remove this from the build list? -timc 1/7/2010 -->
    <target name="make-DialogicChannel60" description="Makes DialogicChannel60 devenv.exe">
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build ReleaseSR60 ${dir.src}/winservices/ChannelManager.sln /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- Make ETService                                                    -->
    <!-- ================================================================= -->
    <target name="make-EnvisionService" depends="propset" description="Makes ETService.exe using devenv.exe">
        <!-- NOTE: I'm not sure exactly what this is doing for us, but the
        ETService Release configuration occasionally fails with errors about
        multiply defined libraries.  Running this batch file fixes it.  But it
        needs to be run in the same environment as ETService.vcproj.  That's
        why it's not invoked with executable="cmd.exe" and arg
        line="vsvars.bat" (although that seems to work as well). -->
        <exec dir="${vscommontools}" executable="cmd.exe">
            <arg line="vsvars32.bat"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/server/startserverprocess/C2CServerPro.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/server/shutdownserverprocess/ShutdownServer.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/etservice/ETService.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
        <exec dir="${dir.build}" executable="${compiler.cpp}" vmlauncher="false" failonerror="true">
            <arg line="/build Release ${dir.src}/winservices/etservice/ETServiceInstall.vcproj /out ${dir.build}/BuildLog.txt"/>
        </exec>
    </target>

    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- </buildC#CPP.xml>                                                 -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->

    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- <buildJars.xml>                                                   -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->

    <!-- ================================================================= -->
    <!-- Do Nothing, so eclipse will read this file and make targets       -->
    <!-- accessible                                                        -->
    <!-- ================================================================= -->
    <target name="do_nothing" />

    <!-- ================================================================= -->
    <!-- clean_license                                                     -->
    <!-- ================================================================= -->
    <target name="clean_license" description="Deletes existing compiled classes and jars">
        <delete quiet="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="${dir.src}/server/com/et/license/" includes="**/*.class"/>
        </delete>
        <delete quiet="true" failonerror="false" file="${dir.src}/server/com/et/license/license.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- compile_license                                                   -->
    <!-- ================================================================= -->
    <target name="compile_license" description="Compiles license">
        <!-- source="${javac.source}" -->
        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="${dir.src}/server/com/et/license/"
            destdir="${dir.src}/server/"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="100m"
            memoryMaximumSize="100m" >
            <classpath refid="project-classpath"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- jar_license                                                       -->
    <!-- ================================================================= -->
    <target name="jar_license" description="Jar license">
        <copy file="${dir.src}/server/com/et/license/LicenseManager.class"
            tofile="${dir.src}/com/et/license/LicenseManager.class"/>
        <jar destfile="${dir.src}/server/com/et/license/license.jar"
            basedir="${dir.src}"
            duplicate="preserve"
            includes="com/**/*.class"/>
    </target>

    <!-- ================================================================= -->
    <!-- release_license                                                   -->
    <!-- ================================================================= -->
    <target name="release_license" description="Copies jar to release dir">
        <delete quiet="true" failonerror="false" file="${dir.release}/license.jar"/>
        <copy file="${dir.src}/server/com/et/license/license.jar" tofile="${dir.release}/license.jar"/>
        <delete>
            <fileset dir="${dir.src}/server/com/et/license" includes="**/*.class"/>
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- clean_Envision                                                    -->
    <!-- ================================================================= -->
    <!-- timc: Obsolete?  Maybe not.  We call into this target (and the rest
    of the _Envision targets) twice. -->
    <target name="clean_Envision" description="Deletes compiled classes and jars">
        <delete quiet="true" failonerror="false" includeEmptyDirs="true">
            <fileset dir="${dir.src}" includes="**/*.class"/>
        </delete>
        <delete quiet="true" failonerror="false" file="${dir.release}/Envision.jar"/>
        <delete quiet="true" failonerror="false" file="${dir.src}/Envision.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- compile_Envision                                                  -->
    <!-- ================================================================= -->
    <target name="compile_Envision" description="Compiles Envision">
        <echo message="[DEBUG] javac.source=${javac.source}"/>
        <!-- <echo message="(compile_Envision) SDK: ${dir.sdk}"/> -->
        <!-- <echo message="${javac.source}"/> -->

        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="${dir.src}" destdir="${dir.src}"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="200m" memoryMaximumSize="1024m">
            <classpath refid="project-classpath"/>
        </javac>

        <!-- TODO do we need this? -->
        <delete quiet="false" failonerror="true"
            file="${dir.src}/com/et/license/LicenseManager.class"/>
        <delete quiet="false" failonerror="true"
            file="${dir.src}/server/com/et/license/LicenseManager.class"/>
        <delete quiet="false" failonerror="true"
            file="${dir.src}/server/com/et/license/jar/LicenseManager.class"/>
    </target>

    <!-- ================================================================= -->
    <!-- compile_java_dev                                                  -->
    <!-- ================================================================= -->
    <target name="compile_java_dev" description="Compiles java for Devs">
        <echo message="Delete existing class files..."/>
        <delete quiet="true" failonerror="false">
            <fileset dir="${dir.src}" includes="**/*.class"/>
        </delete>
        <echo message="Build source..."/>
        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="${dir.src}"
            debug="${javac.debug}"
            deprecation="false"
            nowarn="on"
            fork="yes"
            memoryInitialSize="256m" memoryMaximumSize="378m">
            <classpath refid="project-classpath"/>
            <classpath>
                <dirset dir="${dir.src}">
                    <include name="clients/admin"/>
                    <include name="contactsources/nuasis"/>
                    <include name="contactsources/nuasisPlugIn"/>
                    <include name="contactsources/avayapds"/>
                    <include name="contactsources/cmiaspect"/>
                    <include name="contactsources/concerto"/>
                    <include name="contactsources/generic"/>
                    <include name="contactsources/Genesys"/>
                    <include name="generated"/>
                    <include name="server"/>
                    <include name="tests"/>
                    <include name="tools"/>
                </dirset>
            </classpath>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- jar_Envision                                                      -->
    <!-- ================================================================= -->
    <target name="jar_Envision" description="Jar Envision">
        <jar destfile="${dir.src}/Envision.jar"
            basedir="${dir.src}"
            duplicate="preserve"
            includes="
            com/**/*.class
            com/**/*.xml
            com/**/*.gif
            com/**/*.jpg
            com/**/*.png
            com/**/*.html
            com/**/*.js
            com/**/*.ico
            com/**/*.properties"/>
    </target>

    <!-- ================================================================= -->
    <!-- release_Envision                                                  -->
    <!-- ================================================================= -->
    <target name="release_Envision" description="copies jar to release dir">
        <delete quiet="true" failonerror="false" file="${dir.release}/Envision.jar"/>
        <copy file="${dir.src}/Envision.jar" tofile="${dir.release}/Envision.jar"/>
        <delete>
            <fileset dir="${dir.src}/com" />
        </delete>
    </target>

    <!-- ================================================================= -->
    <!-- Copy Envision jar resources                                       -->
    <!-- ================================================================= -->
    <!-- timc: called from build.xml -->
    <target name="copy-jar-resources" description="Copy Envision jar resources">
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/Server/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/clients/admin/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/Generated/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/apis/bi/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/contactsources/avayapds/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/contactsources/cmiaspect/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>

        <!-- timc: Nothing with these extensions are present, AFAIK -->
        <copy todir="${dir.src}/com/et">
            <fileset dir="${dir.src}/contactsources/concerto/com/et"
                includes="
                **/*.xml
                **/*.gif
                **/*.jpg
                **/*.png
                **/*.html
                **/*.js
                **/*.ico
                **/*.properties"
                excludes="**/*UTF16.properties"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Compile EnvisionPlugin                                            -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <target name="make-EnvisionPlugin" description="Compiles EnvisionPlugin">
        <property name="EnvisionPluginBasedir"
            value="${dir.workdir}/ContactSourceRunner/EnvisionPlugin/"/>
        <mkdir dir="${EnvisionPluginBasedir}"/>
        <!-- TODO fork, memoryInitialSize & memoryMaximumSize need to go to
        build.properties (or, better, to runbuild.py -timc 2/5/2010 -->
        <javac srcdir="${dir.src}/contactSources/nuasisPlugin/"
            destdir="${EnvisionPluginBasedir}"
            debug="${javac.debug}"
            deprecation="${javac.deprecation}"
            fork="yes"
            memoryInitialSize="100m"
            memoryMaximumSize="100m" >
            <classpath refid="project-classpath"/>
        </javac>
    </target>

    <!-- ================================================================= -->
    <!-- Jar EnvisionPlugin                                                -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <target name="jar-EnvisionPlugin" description="Creates EnvisionPlugin.jar"
        depends="make-EnvisionPlugin">
        <jar jarfile="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            basedir="${EnvisionPluginBasedir}"
            duplicate="preserve"
            includes="
            com/**/*.class
            com/**/*.xml
            com/**/*.html
            com/**/*.gif
            com/**/*.png
            com/**/*.jpg
            com/**/*.ico
            com/**/*.properties"/>
    </target>

    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- </buildJars.xml>                                                  -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->


    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- </buildSetup.xml>                                                  -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->

    <!-- ================================================================= -->
    <!-- Top-level target: create and deploy all installers                -->
    <!-- ================================================================= -->
    <!-- TODO Consider getting rid of antcall in order to maintain the
    environment.  Make the top-level target (release-installers in this case)
    depend on these other targets. -->
    <!-- Late note: a less radical approach might be use 'depends="propset"'
    on all targets that include calls to antcall.  That seems to work okay.
    -timc Cinco de Mayo 2010 -->
    <target name="release-installers" depends="propset, prepare"
        description="Copies installers, documentation, etc. from build machine to release share">

        <!-- target1, all versions -->
        <antcall target="release-AgentSupport"/>
        <antcall target="release-PerformanceSuite"/>
        <antcall target="release-Documentation-CD1"/>

        <!-- target2, all versions -->
        <antcall target="release-Server"/>
        <antcall target="release-Documentation-CD2"/>

        <!-- utils -->
        <antcall target="release-ADIT"/>
        <antcall target="release-AGMS"/>
        <antcall target="release-DADI"/>
        <antcall target="release-DBMigration"/>
        <antcall target="release-ECC"/>

        <!-- target3 -->
        <!-- <antcall target="release-DotNetInstaller"/> -->
        <antcall target="release-CD3"/>

        <!-- TODO if we're doing only 9.6 and later, this is redundant (but
        harmless and informative) -->
        <!-- 9.6.x -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="6"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="6"/>
                </and>
            </or>
            <then>
                <!-- target2, 9.6.0000.0 and later -->
                <antcall target="release-Analytics"/>
                <antcall target="release-Centricity"/>
                <!-- <antcall target="release-CentricityWebApplications"/> -->
                <antcall target="release-WMWrapperService"/>
            </then>
        </ac:if>

        <!-- 9.8.x -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="8"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="8"/>
                </and>
            </or>
            <then>
                <!-- target2, 9.8.0000.0 and later -->
                <antcall target="release-SpeechServerService"/>
                <antcall target="release-SpeechProcessingClient"/>
                <!-- target3, 9.8.0000.0 and later -->
                <antcall target="release-EnvisionPlugin"/>
            </then>
        </ac:if>

        <!-- Grab your nuts, squirrels, and gather 'round, 'cuz this is how
        you say "if greater than or equal to 10.0.0100" in Ant. -->
        <ac:if>
            <or>
                <!-- if greater than 10 -->
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="10"/>
                </and>
                <!-- if greater than 10.0 -->
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="10"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="0"/>
                </and>
                <!-- if greater than 10.0.0100 -->
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="10"/>
                    <ac:equals arg1="${MINOR}" arg2="0"/>
                    <ac:isgreaterthan arg1="${RELEASE}" arg2="0100"/>
                </and>
                <!-- if equal to 10.0.0100 -->
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="10"/>
                    <ac:equals arg1="${MINOR}" arg2="0"/>
                    <ac:equals arg1="${RELEASE}" arg2="0100"/>
                </and>
            </or>
            <then>
                <antcall target="release-CentricityQM"/>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Prepare the release share for the installers                      -->
    <!-- ================================================================= -->
    <target name="prepare" description="Prepare the release share for the installers">
        <mkdir dir="${dir.products}/${version.product}"/>
        <!-- assign these properties sooner so they can be used by the
        sub-targets (release-ADIT, release-DADI, etc.) as well as by
        release-installers -->
        <property name="target1" value="${dir.products}/${version.product}/CD1"/>
        <property name="target2" value="${dir.products}/${version.product}/CD2"/>
        <property name="target3" value="${dir.products}/${version.product}/CD3"/>
        <property name="dir.utils" value="${target2}/utils"/>
        <property name="dir.nuasis-plugin" value="${target2}/utils/Nuasis"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip WebHelp for the Server installer                            -->
    <!-- ================================================================= -->
    <target name="unzip-WebHelp"
        depends="unzip-AgentDesktop_WebHelp, unzip-BI_WebHelp,
        unzip-Centricity_WebHelp, unzip-ClassicReports_WebHelp"/>

    <!-- ================================================================= -->
    <!-- Unzip Agent_Desktop_Webhelp.zip for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-AgentDesktop_WebHelp">
        <!--
        root: 9.6\Initial\base\Documentation
        source: ${root}\WebHelp\AgentDesktop.zip
        destination: ${root}\WebHelp\AgentDesktop
        content: ${root}\WebHelp\AgentDesktop\9.6\Output\WebWorks Help 5.0\Envision Agent Desktop\
        .
        The ${content} directory is the dividing line between Ant and AI.
        Once that directory and its contents are present, Ant is done and AI
        needs to be able to find the _Envision Agent Desktop_ directory.
        -->
        <!-- Maybe later this will become three separate tasks. -->
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip BI WebHelp for the Server installer                         -->
    <!-- ================================================================= -->
    <!-- BI is not localized -->
    <target name="unzip-BI_WebHelp">
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/BI_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/BI_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Centricity WebHelp for the Server installer                 -->
    <!-- ================================================================= -->
    <target name="unzip-Centricity_WebHelp" depends="propset">
        <!-- Maybe later this will become three separate tasks. -->
        <!-- Centricity documentation for Supervisors -->
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Centricity_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Centricity_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Centricity_Webhelp"/>
        <!-- Centricity documentation for Agents: 9.8 and later only -->
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="8"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="8"/>
                </and>
            </or>
            <then>
                <unjar
                    src="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp.zip"
                    dest="${dir.build}/Documentation/WebHelp/EN/Agent_Desktop_Centricity_Webhelp"/>
            </then>
        </ac:if>

        <!-- localized documentation is currently in 9.10 SP2 only -->
        <ac:if>
            <or>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="10"/>
                    <ac:equals arg1="${RELEASE}" arg2="0200"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="10"/>
                    <ac:isgreaterthan arg1="${RELEASE}" arg2="0200"/>
                </and>
            </or>
            <then>
                <unjar
                    src="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp.zip"
                    dest="${dir.build}/Documentation/WebHelp/DE/Agent_Desktop_Centricity_Webhelp"/>
                <unjar
                    src="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp.zip"
                    dest="${dir.build}/Documentation/WebHelp/ES/Agent_Desktop_Centricity_Webhelp"/>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip Classic reporting WebHelp for the Server installer          -->
    <!-- ================================================================= -->
    <target name="unzip-ClassicReports_WebHelp">
        <!-- Maybe later this will become three separate tasks. -->
        <unjar
            src="${dir.build}/Documentation/WebHelp/EN/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/EN/Classic_reports_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/DE/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/DE/Classic_reports_Webhelp"/>
        <unjar
            src="${dir.build}/Documentation/WebHelp/ES/Classic_reports_Webhelp.zip"
            dest="${dir.build}/Documentation/WebHelp/ES/Classic_reports_Webhelp"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the "Envision" JRE into the working copy                    -->
    <!-- ================================================================= -->
    <!-- In case you're wondering: this is a repackage of the private JRE from
    jdk-6u14-windows-i586.exe.  As far as I know, we cannot use the public
    JRE, because it's missing bin\client\jvm.dll or bin\server\jvm.dll (I
    forget exactly which, but it's something like that.
    .
    TODO common-buildtools needs to include a version check going forward from
    July09 (9.10).  It should include the JRE and the zipped up JAR files for
    Server and PerformanceSuite.
    .
    PKI09 (9.9) -> 1.6.0_03
    July09 (9.10) -> 1.6.0_14 -->
    <target name="unzip-Envision_JRE" depends="propset">
        <property name="Envision_JRE" value="jre1.6.0_14-Envision-no-jars.zip"/>
        <unjar
            src="${dir.jre}/${Envision_JRE}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the Server JARs into the working copy                       -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-Server depends on both of them.) -->
    <!-- TODO this needs to be updated.  At least ActiveMQ is out of date,
    possibly others as well. -timc, Cinco de Mayo 2010 -->
    <target name="unzip-Server-jars_ZIP" depends="propset">
        <property name="Server-jars_ZIP" value="jar-files-EnvisionServer-9.10.zip"/>
        <unjar
            src="${dir.jre}/${Server-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the PerformanceSuite JARs into the working copy             -->
    <!-- ================================================================= -->
    <!-- I decided to keep the JAR files out of the JRE at the level of the
    working copy.  They will be added in by the installer, but this keeps
    things from getting messy.  And it removes an artificial dependency, since
    unzip-Server-jars_ZIP would otherwise depend on unzip-Envision_JRE.
    (make-PerformanceSuite depends on both of them.) -->
    <!-- TODO this needs to be updated.  At least ActiveMQ is out of date,
    possibly others as well. -timc, Cinco de Mayo 2010 -->
    <target name="unzip-PerformanceSuite-jars_ZIP" depends="propset">
        <property name="EPS-jars_ZIP" value="jar-files-EnvisionPerformanceSuite-9.10.zip"/>
        <unjar
            src="${dir.jre}/${EPS-jars_ZIP}"
            dest="${dir.sdk}/java"/>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the default Nuance profile for the Speech Server            -->
    <!-- ================================================================= -->
    <target name="unzip-NuanceProfile" depends="propset">
        <unjar src="${dir.sdk}/Nuance/Envision.zip"
            dest="${dir.workdir}/AudioMining"/>
        <ac:if>
            <or>
                <and>
                    <ac:isgreaterthan arg1="${MAJOR}" arg2="9"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:equals arg1="${MINOR}" arg2="12"/>
                </and>
                <and>
                    <ac:equals arg1="${MAJOR}" arg2="9"/>
                    <ac:isgreaterthan arg1="${MINOR}" arg2="12"/>
                </and>
            </or>
            <then>
                <unjar src="${dir.sdk}/Nuance/EnvisionEnglishUK.zip"
                    dest="${dir.workdir}/AudioMining"/>
                <unjar src="${dir.sdk}/Nuance/EnvisionGerman.zip"
                    dest="${dir.workdir}/AudioMining"/>
                <exec dir="${dir.bin}" executable="7za.exe" vmlauncher="false" failonerror="false">
                    <arg line="x ${dir.sdk}/Nuance/EnvisionSpanish.zip -o${dir.workdir}/AudioMining"/>
                </exec>
                <exec dir="${dir.bin}" executable="7za.exe" vmlauncher="false" failonerror="false">
                    <arg line="x ${dir.sdk}/Nuance/EnvisionSpanishLA.zip -o${dir.workdir}/AudioMining"/>
                </exec>
            </then>
        </ac:if>
    </target>

    <!-- ================================================================= -->
    <!-- Unzip the Iontas client files                                     -->
    <!-- ================================================================= -->
    <target name="unzip-IontasClient" depends="propset">
        <unjar
            src="${uncpath.iontas}/IontasClient4.1.zip"
            dest="${dir.sdk}/Iontas"/>
    </target>

    <!-- ================================================================= -->
    <!-- Publish CD3                                                       -->
    <!-- ================================================================= -->
    <target name="release-CD3" depends="prepare">
        <copy todir="${target3}">
            <fileset dir="${uncpath.cd3_sources}"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Release .NET 3.5 SP1 installer (prerequisite)                     -->
    <!-- ================================================================= -->
    <!--
    <target name="release-DotNetInstaller" depends="prepare">
        <copy todir="${target3}/DotNetFramework">
            <fileset dir="${uncpath.dotnet}"/>
        </copy>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make and release ADIT                                             -->
    <!-- ================================================================= -->
    <target name="make-ADIT-installer" depends="prepare">
        <build-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            project.file="${dir.installs}/ADIT/ADIT.aip"/>
    </target>
    <target name="release-ADIT" depends="make-ADIT-installer">
        <release-AI-installer
            product.name="ADIT"
            installer.path="${dir.installs}/ADIT"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AgentSupport                                     -->
    <!-- ================================================================= -->
    <!-- NB: AgentSupport directory is called Agent in 9.6 -->
    <target name="make-AgentSupport-installer" depends="prepare">
        <build-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            project.file="${dir.installs}/AgentSupport/AgentSupport.aip"/>
    </target>
    <target name="release-AgentSupport" depends="make-AgentSupport-installer">
        <release-AI-installer
            product.name="AgentSupport"
            installer.path="${dir.installs}/AgentSupport"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release AGMS                                             -->
    <!-- ================================================================= -->
    <target name="make-AGMS-installer" depends="prepare">
        <build-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            project.file="${dir.installs}/AGMS/AGMS.aip"/>
    </target>
    <target name="release-AGMS" depends="make-AGMS-installer">
        <release-AI-installer
            product.name="AGMS"
            installer.path="${dir.installs}/AGMS"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Analytics                                        -->
    <!-- ================================================================= -->
    <target name="make-Analytics-installer" depends="prepare">
        <build-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            project.file="${dir.installs}/Analytics/Analytics.aip"/>
    </target>
    <target name="release-Analytics" depends="make-Analytics-installer">
        <release-AI-installer
            product.name="Analytics"
            installer.path="${dir.installs}/Analytics"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Centricity                                       -->
    <!-- ================================================================= -->
    <target name="make-Centricity-installer" depends="prepare,unzip-Centricity_WebHelp">
        <build-AI-installer
            product.name="Centricity"
            installer.path="${dir.installs}/Centricity"
            project.file="${dir.installs}/Centricity/Centricity.aip"/>
    </target>
    <target name="release-Centricity" depends="make-Centricity-installer">
        <release-AI-installer
            product.name="Centricity"
            installer.path="${dir.installs}/Centricity"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityQM                                       -->
    <!-- ================================================================= -->
    <target name="make-CentricityQM-installer">
        <build-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            project.file="${dir.installs}/CentricityQM/CentricityQM.aip"/>
    </target>
    <target name="release-CentricityQM" depends="make-CentricityQM-installer">
        <release-AI-installer
            product.name="CentricityQM"
            installer.path="${dir.installs}/CentricityQM"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release CentricityWebApplications                        -->
    <!-- ================================================================= -->
    <!-- PRN22798 - obsolete -timc 4/7/2010 -->
    <!--
    <target name="make-CentricityWebApplications" depends="prepare">
        <build-AI-installer
            product.name="CentricityWebApplications"
            installer.path="${dir.installs}/CentricityWebApplications"
            project.file="${dir.installs}/CentricityWebApplications/CentricityWebApplications.aip"/>
    </target>
    <target name="release-CentricityWebApplications" depends="make-CentricityWebApplications">
        <release-AI-installer
            product.name="CentricityWebApplications"
            installer.path="${dir.installs}/CentricityWebApplications"
            product.path="${target2}"/>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Make and release SpeechServerService                              -->
    <!-- ================================================================= -->
    <target name="make-SpeechServerService-installer" depends="prepare">
        <build-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            project.file="${dir.installs}/SpeechServerService/SpeechServerService.aip"/>
    </target>
    <target name="release-SpeechServerService" depends="make-SpeechServerService-installer">
        <release-AI-installer
            product.name="SpeechServerService"
            installer.path="${dir.installs}/SpeechServerService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release SpeechProcessingClient                           -->
    <!-- ================================================================= -->
    <target name="make-SpeechProcessingClient-installer" depends="prepare,unzip-NuanceProfile">
        <build-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            project.file="${dir.installs}/SpeechProcessingClient/SpeechProcessingClient.aip"/>
    </target>
    <target name="release-SpeechProcessingClient" depends="make-SpeechProcessingClient-installer">
        <release-AI-installer
            product.name="SpeechProcessingClient"
            installer.path="${dir.installs}/SpeechProcessingClient"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release DADI                                             -->
    <!-- ================================================================= -->
    <target name="make-DADI-installer" depends="prepare">
        <build-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            project.file="${dir.installs}/DADI/DADI.aip"/>
    </target>
    <target name="release-DADI" depends="make-DADI-installer">
        <release-AI-installer
            product.name="DADI"
            installer.path="${dir.installs}/DADI"
            product.path="${dir.utils}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release DBMigration                                      -->
    <!-- ================================================================= -->
    <target name="make-DBMigration-installer" depends="prepare">
        <build-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            project.file="${dir.installs}/DBMigration/DBMigration.aip"/>
    </target>
    <target name="release-DBMigration" depends="make-DBMigration-installer">
        <release-AI-installer
            product.name="DBMigration"
            installer.path="${dir.installs}/DBMigration"
            product.path="${dir.utils}"/>
    </target>

    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <!-- ================================================================= -->
    <!-- Release documentation                                             -->
    <!-- ================================================================= -->
    <target name="release-Documentation-CD1" depends="prepare">
        <!-- full documentation to target1 -->
        <copy todir="${target1}/Documentation">
            <fileset dir="${dir.build}/Documentation/QuickReference">
                <!-- TODO Can I get rid of this?  It's pointless. -->
                <include name="QRS - CentricityAgentDesktop.pdf"/>
            </fileset>
        </copy>
        <copy todir="${target1}/Documentation/UserGuides">
            <fileset dir="${dir.build}/Documentation/UserGuides">
                <exclude name="Install_Upgrade.pdf"/>
            </fileset>
        </copy>
        <!-- ReleaseNotes.pdf with a name change -->
        <copy file="${dir.build}/Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target1}/Documentation/ReleaseNotes.pdf"/>
        <copy file="${dir.build}/Documentation/AdbeRdr70_enu.exe"
            tofile="${target1}/Documentation/AdbeRdr70_enu.exe"/>
    </target>
    <!-- TODO this may need to be changed to work with 9.6 to present -->
    <target name="release-Documentation-CD2" depends="prepare">
        <!-- release notes only to target2 -->
        <copy file="${dir.build}/Documentation/ReleaseNotes/ReleaseNotes.pdf"
            tofile="${target2}/Documentation/ReleaseNotes.pdf"/>
        <copy file="${dir.build}/Documentation/AdbeRdr70_enu.exe"
            tofile="${target2}/Documentation/AdbeRdr70_enu.exe"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release EvaluationConsistencyCheck (ECC)                 -->
    <!-- ================================================================= -->
    <target name="make-ECC-installer" depends="prepare">
        <build-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            project.file="${dir.installs}/EvaluationConsistencyCheck/EvaluationConsistencyCheck.aip"/>
    </target>
    <target name="release-ECC" depends="make-ECC-installer">
        <release-AI-installer
            product.name="EvaluationConsistencyCheck"
            installer.path="${dir.installs}/EvaluationConsistencyCheck"
            product.path="${dir.utils}"/>
        <!-- additional copy operation for this installer only -->
        <!-- <copy todir="${dir.utils}/EvaluationConsistencyCheck/QM"> -->
        <copy todir="${dir.utils}/EPS8.4_QMPublishedTemplateEditor">
            <fileset dir="${dir.installs}/EvaluationConsistencyCheck/QM"/>
        </copy>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release PerformanceSuite                                 -->
    <!-- ================================================================= -->
    <target name="make-PerformanceSuite-installer"
        depends="prepare, unzip-BI_WebHelp, unzip-Envision_JRE, unzip-PerformanceSuite-jars_ZIP">
        <build-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            project.file="${dir.installs}/PerformanceSuite/PerformanceSuite.aip"/>
    </target>
    <target name="release-PerformanceSuite" depends="make-PerformanceSuite-installer">
        <release-AI-installer
            product.name="PerformanceSuite"
            installer.path="${dir.installs}/PerformanceSuite"
            product.path="${target1}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release Server                                           -->
    <!-- ================================================================= -->
    <!-- NB: you'll get AI errors if you use -Ddir.build=C:\foo\bar\baz
    (backslashes) instead of -Ddir.build=C:/foo/bar/baz
    .
    Late note: you'll also get AI errors if you use a mangled path like
    -Ddir.build=C:\Source\9.7\SP1\base-9.7.0100.5-r6372 instead of
    -Ddir.build=C:\Source\9.7\SP1\base
    .
    Late note 2: it looks like using -Ddir.build with either kind of path
    causes it to error out. :( -->

    <!-- NB: Server directory is called EnvisionServer in 9.6 -->
    <target name="make-Server-installer"
        depends="prepare, unzip-WebHelp, unzip-Envision_JRE, unzip-Server-jars_ZIP">
        <build-AI-installer
            product.name="Server"
            installer.path="${dir.installs}/Server"
            project.file="${dir.installs}/Server/Server.aip"/>
    </target>
    <target name="release-Server" depends="make-Server-installer">
        <release-AI-installer
            product.name="Server"
            installer.path="${dir.installs}/Server"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Make and release WMWrapperService                                 -->
    <!-- ================================================================= -->
    <target name="make-WMWrapperService-installer" depends="prepare">
        <build-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            project.file="${dir.installs}/WMWrapperService/WMWrapperService.aip"/>
    </target>
    <target name="release-WMWrapperService" depends="make-WMWrapperService-installer">
        <release-AI-installer
            product.name="WMWrapperService"
            installer.path="${dir.installs}/WMWrapperService"
            product.path="${target2}"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release EnvisionPlugin (for Nuasis only)                          -->
    <!-- ================================================================= -->
    <!-- This plugin goes on the customer's PBX to pass contact source
    messages back and forth with the Server -->
    <!-- TODO it would be much nicer if I could add dependencies on
    jar-EnvisionPlugin and have access to property EnvisionPluginBasedir as
    well.  I'd probably have to put all the build files together to do that
    (which is not a bad idea).  As it stands right now, I'm duplicating the
    property name here in case it's not already set (that blows). -->
    <target name="release-EnvisionPlugin" depends="prepare">
        <property name="EnvisionPluginBasedir"
            value="${dir.workdir}/ContactSourceRunner/EnvisionPlugin/"/>
        <copy file="${EnvisionPluginBasedir}/EnvisionPlugin.jar"
            tofile="${dir.nuasis-plugin}/EnvisionPlugin.jar"/>
    </target>

    <!-- ================================================================= -->
    <!-- Release AutoRun files                                             -->
    <!-- ================================================================= -->
    <!-- Note: this is just a copy operation.  These files do not need to be
    compiled on a nightly basis. -->
    <!-- timc: not used -->
    <!--
    <target name="release-AutoRun-CD1" depends="prepare">
        <copy file="${dir.build}/setup/CD-Autorun/CD1/autorun.apm"
            tofile="${target1}/autorun.apm"/>
        <copy file="${dir.build}/setup/CD-Autorun/CD1/autorun.exe"
            tofile="${target1}/autorun.exe"/>
        <copy file="${dir.build}/setup/CD-Autorun/CD1/autorun.inf"
            tofile="${target1}/autorun.inf"/>
        <copy todir="${target1}/DATA">
            <fileset dir="${dir.build}/setup/CD-Autorun/CD1/DATA"/>
        </copy>
    </target>

    <target name="release-AutoRun-CD2" depends="prepare">
        <copy file="${dir.build}/setup/CD-Autorun/CD2/autorun.apm"
            tofile="${target2}/autorun.apm"/>
        <copy file="${dir.build}/setup/CD-Autorun/CD2/autorun.exe"
            tofile="${target2}/autorun.exe"/>
        <copy file="${dir.build}/setup/CD-Autorun/CD2/autorun.inf"
            tofile="${target2}/autorun.inf"/>
        <copy todir="${target2}/DATA">
            <fileset dir="${dir.build}/setup/CD-Autorun/CD2/DATA"/>
        </copy>
    </target>
    -->

    <!-- ================================================================= -->
    <!-- Compile AdvancedInstaller project files (macro)                   -->
    <!-- ================================================================= -->
    <!-- <pathconvert targetos="windows" property="compiler.ai.converted">
        <path path="${compiler.ai}"/>
    </pathconvert>
    <echo message="AI compiler path: ${compiler.ai}"/>
    <echo message="AI compiler path (converted): ${compiler.ai.converted}"/> -->
    <!-- TODO pathconvert these guys (not hipri) 1/7/2009 -->
    <!-- some useful bits in the comments here
    http://blog.andrewbeacock.com/2005/08/pretty-printing-java-classpaths-using.html
    -->
    <macrodef name="build-AI-installer">
        <attribute name="product.name" default="NOT SET"/>
        <attribute name="installer.path" default="NOT SET"/>
        <attribute name="project.file" default="NOT SET"/>
        <sequential>
            <echo message="Making installer at @{project.file}"/>
            <mkdir dir="@{installer.path}/newInstall"/>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/edit @{project.file} /SetVersion ${version.product}"/>
            </exec>
            <exec dir="@{installer.path}" executable="${compiler.ai}" failonerror="true">
                <arg line="/build @{project.file}"/>
            </exec>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- Release AI installers (macro)                                     -->
    <!-- ================================================================= -->
    <!-- TODO Remove the newInstall bits at some point.  PRN19794 was for
    removing the folders from ProductBuilds, but the ones that are left are on
    the build machine.
    .
    When changing newInstall to install in build-AI-installer and
    release-AI-installer, EVERY installer project file needs to be updated at
    the same time (on the media page).  Open a PRN for it. -timc 1/7/2009 -->
    <macrodef name="release-AI-installer">
        <attribute name="product.name" default="NOT SET"/>
        <attribute name="installer.path" default="NOT SET"/>
        <attribute name="product.path" default="NOT SET"/>
        <sequential>
            <copy todir="@{product.path}">
                <fileset dir="@{installer.path}/newInstall"/>
            </copy>
        </sequential>
    </macrodef>

    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- </buildSetup.xml>                                                  -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->

</project>

